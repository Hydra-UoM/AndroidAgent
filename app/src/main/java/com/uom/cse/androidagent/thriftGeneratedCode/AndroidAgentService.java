/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.uom.cse.androidagent.thriftGeneratedCode;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
public class AndroidAgentService {

  public interface Iface {

    public List<TProcessInfo> getAllRunningProcesses() throws TException;

    public List<TProcessInfo> getRAMUsageInfo() throws TException;

    public List<TProcessInfo> getCPUUsageInfo() throws TException;

    public List<TProcessInfo> getInternetUsage() throws TException;

    public DeviceOverallInfo getOverallBasicInfo() throws TException;

    public String getOverallCpuInfo() throws TException;

    public String getOverallRamFreeMemoryInfo() throws TException;

    public String getOverallRamUsedMemoryInfo() throws TException;

    public String getBattery() throws TException;

    public List<TProcessInfo> getAllRunningProcessesWithInfo() throws TException;

    public List<SensorDetails> getSensorDetails() throws TException;

    public List<TProcessInfo> getFilteredProcessInfo(String cpuUsage, String ramUsage, String processName) throws TException;

    public boolean testNetwork(ByteBuffer data) throws TException;

    public boolean deployCommand(short cpuUsage, short ramUsage, short receiveData, short sentData, short timeInterval, String process) throws TException;

  }

  public interface AsyncIface {

    public void getAllRunningProcesses(AsyncMethodCallback resultHandler) throws TException;

    public void getRAMUsageInfo(AsyncMethodCallback resultHandler) throws TException;

    public void getCPUUsageInfo(AsyncMethodCallback resultHandler) throws TException;

    public void getInternetUsage(AsyncMethodCallback resultHandler) throws TException;

    public void getOverallBasicInfo(AsyncMethodCallback resultHandler) throws TException;

    public void getOverallCpuInfo(AsyncMethodCallback resultHandler) throws TException;

    public void getOverallRamFreeMemoryInfo(AsyncMethodCallback resultHandler) throws TException;

    public void getOverallRamUsedMemoryInfo(AsyncMethodCallback resultHandler) throws TException;

    public void getBattery(AsyncMethodCallback resultHandler) throws TException;

    public void getAllRunningProcessesWithInfo(AsyncMethodCallback resultHandler) throws TException;

    public void getSensorDetails(AsyncMethodCallback resultHandler) throws TException;

    public void getFilteredProcessInfo(String cpuUsage, String ramUsage, String processName, AsyncMethodCallback resultHandler) throws TException;

    public void testNetwork(ByteBuffer data, AsyncMethodCallback resultHandler) throws TException;

    public void deployCommand(short cpuUsage, short ramUsage, short receiveData, short sentData, short timeInterval, String process, AsyncMethodCallback resultHandler) throws TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<TProcessInfo> getAllRunningProcesses() throws TException
    {
      send_getAllRunningProcesses();
      return recv_getAllRunningProcesses();
    }

    public void send_getAllRunningProcesses() throws TException
    {
      getAllRunningProcesses_args args = new getAllRunningProcesses_args();
      sendBase("getAllRunningProcesses", args);
    }

    public List<TProcessInfo> recv_getAllRunningProcesses() throws TException
    {
      getAllRunningProcesses_result result = new getAllRunningProcesses_result();
      receiveBase(result, "getAllRunningProcesses");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllRunningProcesses failed: unknown result");
    }

    public List<TProcessInfo> getRAMUsageInfo() throws TException
    {
      send_getRAMUsageInfo();
      return recv_getRAMUsageInfo();
    }

    public void send_getRAMUsageInfo() throws TException
    {
      getRAMUsageInfo_args args = new getRAMUsageInfo_args();
      sendBase("getRAMUsageInfo", args);
    }

    public List<TProcessInfo> recv_getRAMUsageInfo() throws TException
    {
      getRAMUsageInfo_result result = new getRAMUsageInfo_result();
      receiveBase(result, "getRAMUsageInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRAMUsageInfo failed: unknown result");
    }

    public List<TProcessInfo> getCPUUsageInfo() throws TException
    {
      send_getCPUUsageInfo();
      return recv_getCPUUsageInfo();
    }

    public void send_getCPUUsageInfo() throws TException
    {
      getCPUUsageInfo_args args = new getCPUUsageInfo_args();
      sendBase("getCPUUsageInfo", args);
    }

    public List<TProcessInfo> recv_getCPUUsageInfo() throws TException
    {
      getCPUUsageInfo_result result = new getCPUUsageInfo_result();
      receiveBase(result, "getCPUUsageInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCPUUsageInfo failed: unknown result");
    }

    public List<TProcessInfo> getInternetUsage() throws TException
    {
      send_getInternetUsage();
      return recv_getInternetUsage();
    }

    public void send_getInternetUsage() throws TException
    {
      getInternetUsage_args args = new getInternetUsage_args();
      sendBase("getInternetUsage", args);
    }

    public List<TProcessInfo> recv_getInternetUsage() throws TException
    {
      getInternetUsage_result result = new getInternetUsage_result();
      receiveBase(result, "getInternetUsage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getInternetUsage failed: unknown result");
    }

    public DeviceOverallInfo getOverallBasicInfo() throws TException
    {
      send_getOverallBasicInfo();
      return recv_getOverallBasicInfo();
    }

    public void send_getOverallBasicInfo() throws TException
    {
      getOverallBasicInfo_args args = new getOverallBasicInfo_args();
      sendBase("getOverallBasicInfo", args);
    }

    public DeviceOverallInfo recv_getOverallBasicInfo() throws TException
    {
      getOverallBasicInfo_result result = new getOverallBasicInfo_result();
      receiveBase(result, "getOverallBasicInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOverallBasicInfo failed: unknown result");
    }

    public String getOverallCpuInfo() throws TException
    {
      send_getOverallCpuInfo();
      return recv_getOverallCpuInfo();
    }

    public void send_getOverallCpuInfo() throws TException
    {
      getOverallCpuInfo_args args = new getOverallCpuInfo_args();
      sendBase("getOverallCpuInfo", args);
    }

    public String recv_getOverallCpuInfo() throws TException
    {
      getOverallCpuInfo_result result = new getOverallCpuInfo_result();
      receiveBase(result, "getOverallCpuInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOverallCpuInfo failed: unknown result");
    }

    public String getOverallRamFreeMemoryInfo() throws TException
    {
      send_getOverallRamFreeMemoryInfo();
      return recv_getOverallRamFreeMemoryInfo();
    }

    public void send_getOverallRamFreeMemoryInfo() throws TException
    {
      getOverallRamFreeMemoryInfo_args args = new getOverallRamFreeMemoryInfo_args();
      sendBase("getOverallRamFreeMemoryInfo", args);
    }

    public String recv_getOverallRamFreeMemoryInfo() throws TException
    {
      getOverallRamFreeMemoryInfo_result result = new getOverallRamFreeMemoryInfo_result();
      receiveBase(result, "getOverallRamFreeMemoryInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOverallRamFreeMemoryInfo failed: unknown result");
    }

    public String getOverallRamUsedMemoryInfo() throws TException
    {
      send_getOverallRamUsedMemoryInfo();
      return recv_getOverallRamUsedMemoryInfo();
    }

    public void send_getOverallRamUsedMemoryInfo() throws TException
    {
      getOverallRamUsedMemoryInfo_args args = new getOverallRamUsedMemoryInfo_args();
      sendBase("getOverallRamUsedMemoryInfo", args);
    }

    public String recv_getOverallRamUsedMemoryInfo() throws TException
    {
      getOverallRamUsedMemoryInfo_result result = new getOverallRamUsedMemoryInfo_result();
      receiveBase(result, "getOverallRamUsedMemoryInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOverallRamUsedMemoryInfo failed: unknown result");
    }

    public String getBattery() throws TException
    {
      send_getBattery();
      return recv_getBattery();
    }

    public void send_getBattery() throws TException
    {
      getBattery_args args = new getBattery_args();
      sendBase("getBattery", args);
    }

    public String recv_getBattery() throws TException
    {
      getBattery_result result = new getBattery_result();
      receiveBase(result, "getBattery");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBattery failed: unknown result");
    }

    public List<TProcessInfo> getAllRunningProcessesWithInfo() throws TException
    {
      send_getAllRunningProcessesWithInfo();
      return recv_getAllRunningProcessesWithInfo();
    }

    public void send_getAllRunningProcessesWithInfo() throws TException
    {
      getAllRunningProcessesWithInfo_args args = new getAllRunningProcessesWithInfo_args();
      sendBase("getAllRunningProcessesWithInfo", args);
    }

    public List<TProcessInfo> recv_getAllRunningProcessesWithInfo() throws TException
    {
      getAllRunningProcessesWithInfo_result result = new getAllRunningProcessesWithInfo_result();
      receiveBase(result, "getAllRunningProcessesWithInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllRunningProcessesWithInfo failed: unknown result");
    }

    public List<SensorDetails> getSensorDetails() throws TException
    {
      send_getSensorDetails();
      return recv_getSensorDetails();
    }

    public void send_getSensorDetails() throws TException
    {
      getSensorDetails_args args = new getSensorDetails_args();
      sendBase("getSensorDetails", args);
    }

    public List<SensorDetails> recv_getSensorDetails() throws TException
    {
      getSensorDetails_result result = new getSensorDetails_result();
      receiveBase(result, "getSensorDetails");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSensorDetails failed: unknown result");
    }

    public List<TProcessInfo> getFilteredProcessInfo(String cpuUsage, String ramUsage, String processName) throws TException
    {
      send_getFilteredProcessInfo(cpuUsage, ramUsage, processName);
      return recv_getFilteredProcessInfo();
    }

    public void send_getFilteredProcessInfo(String cpuUsage, String ramUsage, String processName) throws TException
    {
      getFilteredProcessInfo_args args = new getFilteredProcessInfo_args();
      args.setCpuUsage(cpuUsage);
      args.setRamUsage(ramUsage);
      args.setProcessName(processName);
      sendBase("getFilteredProcessInfo", args);
    }

    public List<TProcessInfo> recv_getFilteredProcessInfo() throws TException
    {
      getFilteredProcessInfo_result result = new getFilteredProcessInfo_result();
      receiveBase(result, "getFilteredProcessInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFilteredProcessInfo failed: unknown result");
    }

    public boolean testNetwork(ByteBuffer data) throws TException
    {
      send_testNetwork(data);
      return recv_testNetwork();
    }

    public void send_testNetwork(ByteBuffer data) throws TException
    {
      testNetwork_args args = new testNetwork_args();
      args.setData(data);
      sendBase("testNetwork", args);
    }

    public boolean recv_testNetwork() throws TException
    {
      testNetwork_result result = new testNetwork_result();
      receiveBase(result, "testNetwork");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "testNetwork failed: unknown result");
    }

    public boolean deployCommand(short cpuUsage, short ramUsage, short receiveData, short sentData, short timeInterval, String process) throws TException
    {
      send_deployCommand(cpuUsage, ramUsage, receiveData, sentData, timeInterval, process);
      return recv_deployCommand();
    }

    public void send_deployCommand(short cpuUsage, short ramUsage, short receiveData, short sentData, short timeInterval, String process) throws TException
    {
      deployCommand_args args = new deployCommand_args();
      args.setCpuUsage(cpuUsage);
      args.setRamUsage(ramUsage);
      args.setReceiveData(receiveData);
      args.setSentData(sentData);
      args.setTimeInterval(timeInterval);
      args.setProcess(process);
      sendBase("deployCommand", args);
    }

    public boolean recv_deployCommand() throws TException
    {
      deployCommand_result result = new deployCommand_result();
      receiveBase(result, "deployCommand");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deployCommand failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getAllRunningProcesses(AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getAllRunningProcesses_call method_call = new getAllRunningProcesses_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllRunningProcesses_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getAllRunningProcesses_call(AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllRunningProcesses", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllRunningProcesses_args args = new getAllRunningProcesses_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TProcessInfo> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllRunningProcesses();
      }
    }

    public void getRAMUsageInfo(AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getRAMUsageInfo_call method_call = new getRAMUsageInfo_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRAMUsageInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getRAMUsageInfo_call(AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRAMUsageInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRAMUsageInfo_args args = new getRAMUsageInfo_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TProcessInfo> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRAMUsageInfo();
      }
    }

    public void getCPUUsageInfo(AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getCPUUsageInfo_call method_call = new getCPUUsageInfo_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCPUUsageInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getCPUUsageInfo_call(AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCPUUsageInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCPUUsageInfo_args args = new getCPUUsageInfo_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TProcessInfo> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCPUUsageInfo();
      }
    }

    public void getInternetUsage(AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getInternetUsage_call method_call = new getInternetUsage_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getInternetUsage_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getInternetUsage_call(AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getInternetUsage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getInternetUsage_args args = new getInternetUsage_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TProcessInfo> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getInternetUsage();
      }
    }

    public void getOverallBasicInfo(AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getOverallBasicInfo_call method_call = new getOverallBasicInfo_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOverallBasicInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getOverallBasicInfo_call(AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOverallBasicInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOverallBasicInfo_args args = new getOverallBasicInfo_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public DeviceOverallInfo getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOverallBasicInfo();
      }
    }

    public void getOverallCpuInfo(AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getOverallCpuInfo_call method_call = new getOverallCpuInfo_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOverallCpuInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getOverallCpuInfo_call(AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOverallCpuInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOverallCpuInfo_args args = new getOverallCpuInfo_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOverallCpuInfo();
      }
    }

    public void getOverallRamFreeMemoryInfo(AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getOverallRamFreeMemoryInfo_call method_call = new getOverallRamFreeMemoryInfo_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOverallRamFreeMemoryInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getOverallRamFreeMemoryInfo_call(AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOverallRamFreeMemoryInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOverallRamFreeMemoryInfo_args args = new getOverallRamFreeMemoryInfo_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOverallRamFreeMemoryInfo();
      }
    }

    public void getOverallRamUsedMemoryInfo(AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getOverallRamUsedMemoryInfo_call method_call = new getOverallRamUsedMemoryInfo_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOverallRamUsedMemoryInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getOverallRamUsedMemoryInfo_call(AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOverallRamUsedMemoryInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOverallRamUsedMemoryInfo_args args = new getOverallRamUsedMemoryInfo_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOverallRamUsedMemoryInfo();
      }
    }

    public void getBattery(AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getBattery_call method_call = new getBattery_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBattery_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getBattery_call(AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBattery", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBattery_args args = new getBattery_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBattery();
      }
    }

    public void getAllRunningProcessesWithInfo(AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getAllRunningProcessesWithInfo_call method_call = new getAllRunningProcessesWithInfo_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllRunningProcessesWithInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getAllRunningProcessesWithInfo_call(AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllRunningProcessesWithInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllRunningProcessesWithInfo_args args = new getAllRunningProcessesWithInfo_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TProcessInfo> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllRunningProcessesWithInfo();
      }
    }

    public void getSensorDetails(AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getSensorDetails_call method_call = new getSensorDetails_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSensorDetails_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getSensorDetails_call(AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSensorDetails", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSensorDetails_args args = new getSensorDetails_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<SensorDetails> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSensorDetails();
      }
    }

    public void getFilteredProcessInfo(String cpuUsage, String ramUsage, String processName, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getFilteredProcessInfo_call method_call = new getFilteredProcessInfo_call(cpuUsage, ramUsage, processName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFilteredProcessInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String cpuUsage;
      private String ramUsage;
      private String processName;
      public getFilteredProcessInfo_call(String cpuUsage, String ramUsage, String processName, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cpuUsage = cpuUsage;
        this.ramUsage = ramUsage;
        this.processName = processName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFilteredProcessInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFilteredProcessInfo_args args = new getFilteredProcessInfo_args();
        args.setCpuUsage(cpuUsage);
        args.setRamUsage(ramUsage);
        args.setProcessName(processName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TProcessInfo> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFilteredProcessInfo();
      }
    }

    public void testNetwork(ByteBuffer data, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      testNetwork_call method_call = new testNetwork_call(data, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class testNetwork_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ByteBuffer data;
      public testNetwork_call(ByteBuffer data, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.data = data;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("testNetwork", org.apache.thrift.protocol.TMessageType.CALL, 0));
        testNetwork_args args = new testNetwork_args();
        args.setData(data);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_testNetwork();
      }
    }

    public void deployCommand(short cpuUsage, short ramUsage, short receiveData, short sentData, short timeInterval, String process, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      deployCommand_call method_call = new deployCommand_call(cpuUsage, ramUsage, receiveData, sentData, timeInterval, process, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deployCommand_call extends org.apache.thrift.async.TAsyncMethodCall {
      private short cpuUsage;
      private short ramUsage;
      private short receiveData;
      private short sentData;
      private short timeInterval;
      private String process;
      public deployCommand_call(short cpuUsage, short ramUsage, short receiveData, short sentData, short timeInterval, String process, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cpuUsage = cpuUsage;
        this.ramUsage = ramUsage;
        this.receiveData = receiveData;
        this.sentData = sentData;
        this.timeInterval = timeInterval;
        this.process = process;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deployCommand", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deployCommand_args args = new deployCommand_args();
        args.setCpuUsage(cpuUsage);
        args.setRamUsage(ramUsage);
        args.setReceiveData(receiveData);
        args.setSentData(sentData);
        args.setTimeInterval(timeInterval);
        args.setProcess(process);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deployCommand();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getAllRunningProcesses", new getAllRunningProcesses());
      processMap.put("getRAMUsageInfo", new getRAMUsageInfo());
      processMap.put("getCPUUsageInfo", new getCPUUsageInfo());
      processMap.put("getInternetUsage", new getInternetUsage());
      processMap.put("getOverallBasicInfo", new getOverallBasicInfo());
      processMap.put("getOverallCpuInfo", new getOverallCpuInfo());
      processMap.put("getOverallRamFreeMemoryInfo", new getOverallRamFreeMemoryInfo());
      processMap.put("getOverallRamUsedMemoryInfo", new getOverallRamUsedMemoryInfo());
      processMap.put("getBattery", new getBattery());
      processMap.put("getAllRunningProcessesWithInfo", new getAllRunningProcessesWithInfo());
      processMap.put("getSensorDetails", new getSensorDetails());
      processMap.put("getFilteredProcessInfo", new getFilteredProcessInfo());
      processMap.put("testNetwork", new testNetwork());
      processMap.put("deployCommand", new deployCommand());
      return processMap;
    }

    public static class getAllRunningProcesses<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllRunningProcesses_args> {
      public getAllRunningProcesses() {
        super("getAllRunningProcesses");
      }

      public getAllRunningProcesses_args getEmptyArgsInstance() {
        return new getAllRunningProcesses_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllRunningProcesses_result getResult(I iface, getAllRunningProcesses_args args) throws TException {
        getAllRunningProcesses_result result = new getAllRunningProcesses_result();
        result.success = iface.getAllRunningProcesses();
        return result;
      }
    }

    public static class getRAMUsageInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRAMUsageInfo_args> {
      public getRAMUsageInfo() {
        super("getRAMUsageInfo");
      }

      public getRAMUsageInfo_args getEmptyArgsInstance() {
        return new getRAMUsageInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRAMUsageInfo_result getResult(I iface, getRAMUsageInfo_args args) throws TException {
        getRAMUsageInfo_result result = new getRAMUsageInfo_result();
        result.success = iface.getRAMUsageInfo();
        return result;
      }
    }

    public static class getCPUUsageInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCPUUsageInfo_args> {
      public getCPUUsageInfo() {
        super("getCPUUsageInfo");
      }

      public getCPUUsageInfo_args getEmptyArgsInstance() {
        return new getCPUUsageInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCPUUsageInfo_result getResult(I iface, getCPUUsageInfo_args args) throws TException {
        getCPUUsageInfo_result result = new getCPUUsageInfo_result();
        result.success = iface.getCPUUsageInfo();
        return result;
      }
    }

    public static class getInternetUsage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getInternetUsage_args> {
      public getInternetUsage() {
        super("getInternetUsage");
      }

      public getInternetUsage_args getEmptyArgsInstance() {
        return new getInternetUsage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getInternetUsage_result getResult(I iface, getInternetUsage_args args) throws TException {
        getInternetUsage_result result = new getInternetUsage_result();
        result.success = iface.getInternetUsage();
        return result;
      }
    }

    public static class getOverallBasicInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOverallBasicInfo_args> {
      public getOverallBasicInfo() {
        super("getOverallBasicInfo");
      }

      public getOverallBasicInfo_args getEmptyArgsInstance() {
        return new getOverallBasicInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOverallBasicInfo_result getResult(I iface, getOverallBasicInfo_args args) throws TException {
        getOverallBasicInfo_result result = new getOverallBasicInfo_result();
        result.success = iface.getOverallBasicInfo();
        return result;
      }
    }

    public static class getOverallCpuInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOverallCpuInfo_args> {
      public getOverallCpuInfo() {
        super("getOverallCpuInfo");
      }

      public getOverallCpuInfo_args getEmptyArgsInstance() {
        return new getOverallCpuInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOverallCpuInfo_result getResult(I iface, getOverallCpuInfo_args args) throws TException {
        getOverallCpuInfo_result result = new getOverallCpuInfo_result();
        result.success = iface.getOverallCpuInfo();
        return result;
      }
    }

    public static class getOverallRamFreeMemoryInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOverallRamFreeMemoryInfo_args> {
      public getOverallRamFreeMemoryInfo() {
        super("getOverallRamFreeMemoryInfo");
      }

      public getOverallRamFreeMemoryInfo_args getEmptyArgsInstance() {
        return new getOverallRamFreeMemoryInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOverallRamFreeMemoryInfo_result getResult(I iface, getOverallRamFreeMemoryInfo_args args) throws TException {
        getOverallRamFreeMemoryInfo_result result = new getOverallRamFreeMemoryInfo_result();
        result.success = iface.getOverallRamFreeMemoryInfo();
        return result;
      }
    }

    public static class getOverallRamUsedMemoryInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOverallRamUsedMemoryInfo_args> {
      public getOverallRamUsedMemoryInfo() {
        super("getOverallRamUsedMemoryInfo");
      }

      public getOverallRamUsedMemoryInfo_args getEmptyArgsInstance() {
        return new getOverallRamUsedMemoryInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOverallRamUsedMemoryInfo_result getResult(I iface, getOverallRamUsedMemoryInfo_args args) throws TException {
        getOverallRamUsedMemoryInfo_result result = new getOverallRamUsedMemoryInfo_result();
        result.success = iface.getOverallRamUsedMemoryInfo();
        return result;
      }
    }

    public static class getBattery<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBattery_args> {
      public getBattery() {
        super("getBattery");
      }

      public getBattery_args getEmptyArgsInstance() {
        return new getBattery_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBattery_result getResult(I iface, getBattery_args args) throws TException {
        getBattery_result result = new getBattery_result();
        result.success = iface.getBattery();
        return result;
      }
    }

    public static class getAllRunningProcessesWithInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllRunningProcessesWithInfo_args> {
      public getAllRunningProcessesWithInfo() {
        super("getAllRunningProcessesWithInfo");
      }

      public getAllRunningProcessesWithInfo_args getEmptyArgsInstance() {
        return new getAllRunningProcessesWithInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllRunningProcessesWithInfo_result getResult(I iface, getAllRunningProcessesWithInfo_args args) throws TException {
        getAllRunningProcessesWithInfo_result result = new getAllRunningProcessesWithInfo_result();
        result.success = iface.getAllRunningProcessesWithInfo();
        return result;
      }
    }

    public static class getSensorDetails<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSensorDetails_args> {
      public getSensorDetails() {
        super("getSensorDetails");
      }

      public getSensorDetails_args getEmptyArgsInstance() {
        return new getSensorDetails_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSensorDetails_result getResult(I iface, getSensorDetails_args args) throws TException {
        getSensorDetails_result result = new getSensorDetails_result();
        result.success = iface.getSensorDetails();
        return result;
      }
    }

    public static class getFilteredProcessInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFilteredProcessInfo_args> {
      public getFilteredProcessInfo() {
        super("getFilteredProcessInfo");
      }

      public getFilteredProcessInfo_args getEmptyArgsInstance() {
        return new getFilteredProcessInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFilteredProcessInfo_result getResult(I iface, getFilteredProcessInfo_args args) throws TException {
        getFilteredProcessInfo_result result = new getFilteredProcessInfo_result();
        result.success = iface.getFilteredProcessInfo(args.cpuUsage, args.ramUsage, args.processName);
        return result;
      }
    }

    public static class testNetwork<I extends Iface> extends org.apache.thrift.ProcessFunction<I, testNetwork_args> {
      public testNetwork() {
        super("testNetwork");
      }

      public testNetwork_args getEmptyArgsInstance() {
        return new testNetwork_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public testNetwork_result getResult(I iface, testNetwork_args args) throws TException {
        testNetwork_result result = new testNetwork_result();
        result.success = iface.testNetwork(args.data);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class deployCommand<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deployCommand_args> {
      public deployCommand() {
        super("deployCommand");
      }

      public deployCommand_args getEmptyArgsInstance() {
        return new deployCommand_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deployCommand_result getResult(I iface, deployCommand_args args) throws TException {
        deployCommand_result result = new deployCommand_result();
        result.success = iface.deployCommand(args.cpuUsage, args.ramUsage, args.receiveData, args.sentData, args.timeInterval, args.process);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getAllRunningProcesses", new getAllRunningProcesses());
      processMap.put("getRAMUsageInfo", new getRAMUsageInfo());
      processMap.put("getCPUUsageInfo", new getCPUUsageInfo());
      processMap.put("getInternetUsage", new getInternetUsage());
      processMap.put("getOverallBasicInfo", new getOverallBasicInfo());
      processMap.put("getOverallCpuInfo", new getOverallCpuInfo());
      processMap.put("getOverallRamFreeMemoryInfo", new getOverallRamFreeMemoryInfo());
      processMap.put("getOverallRamUsedMemoryInfo", new getOverallRamUsedMemoryInfo());
      processMap.put("getBattery", new getBattery());
      processMap.put("getAllRunningProcessesWithInfo", new getAllRunningProcessesWithInfo());
      processMap.put("getSensorDetails", new getSensorDetails());
      processMap.put("getFilteredProcessInfo", new getFilteredProcessInfo());
      processMap.put("testNetwork", new testNetwork());
      processMap.put("deployCommand", new deployCommand());
      return processMap;
    }

    public static class getAllRunningProcesses<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllRunningProcesses_args, List<TProcessInfo>> {
      public getAllRunningProcesses() {
        super("getAllRunningProcesses");
      }

      public getAllRunningProcesses_args getEmptyArgsInstance() {
        return new getAllRunningProcesses_args();
      }

      public AsyncMethodCallback<List<TProcessInfo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<TProcessInfo>>() { 
          public void onComplete(List<TProcessInfo> o) {
            getAllRunningProcesses_result result = new getAllRunningProcesses_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAllRunningProcesses_result result = new getAllRunningProcesses_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllRunningProcesses_args args, AsyncMethodCallback<List<TProcessInfo>> resultHandler) throws TException {
        iface.getAllRunningProcesses(resultHandler);
      }
    }

    public static class getRAMUsageInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRAMUsageInfo_args, List<TProcessInfo>> {
      public getRAMUsageInfo() {
        super("getRAMUsageInfo");
      }

      public getRAMUsageInfo_args getEmptyArgsInstance() {
        return new getRAMUsageInfo_args();
      }

      public AsyncMethodCallback<List<TProcessInfo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<TProcessInfo>>() { 
          public void onComplete(List<TProcessInfo> o) {
            getRAMUsageInfo_result result = new getRAMUsageInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRAMUsageInfo_result result = new getRAMUsageInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRAMUsageInfo_args args, AsyncMethodCallback<List<TProcessInfo>> resultHandler) throws TException {
        iface.getRAMUsageInfo(resultHandler);
      }
    }

    public static class getCPUUsageInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCPUUsageInfo_args, List<TProcessInfo>> {
      public getCPUUsageInfo() {
        super("getCPUUsageInfo");
      }

      public getCPUUsageInfo_args getEmptyArgsInstance() {
        return new getCPUUsageInfo_args();
      }

      public AsyncMethodCallback<List<TProcessInfo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<TProcessInfo>>() { 
          public void onComplete(List<TProcessInfo> o) {
            getCPUUsageInfo_result result = new getCPUUsageInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCPUUsageInfo_result result = new getCPUUsageInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCPUUsageInfo_args args, AsyncMethodCallback<List<TProcessInfo>> resultHandler) throws TException {
        iface.getCPUUsageInfo(resultHandler);
      }
    }

    public static class getInternetUsage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getInternetUsage_args, List<TProcessInfo>> {
      public getInternetUsage() {
        super("getInternetUsage");
      }

      public getInternetUsage_args getEmptyArgsInstance() {
        return new getInternetUsage_args();
      }

      public AsyncMethodCallback<List<TProcessInfo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<TProcessInfo>>() { 
          public void onComplete(List<TProcessInfo> o) {
            getInternetUsage_result result = new getInternetUsage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getInternetUsage_result result = new getInternetUsage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getInternetUsage_args args, AsyncMethodCallback<List<TProcessInfo>> resultHandler) throws TException {
        iface.getInternetUsage(resultHandler);
      }
    }

    public static class getOverallBasicInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOverallBasicInfo_args, DeviceOverallInfo> {
      public getOverallBasicInfo() {
        super("getOverallBasicInfo");
      }

      public getOverallBasicInfo_args getEmptyArgsInstance() {
        return new getOverallBasicInfo_args();
      }

      public AsyncMethodCallback<DeviceOverallInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<DeviceOverallInfo>() { 
          public void onComplete(DeviceOverallInfo o) {
            getOverallBasicInfo_result result = new getOverallBasicInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOverallBasicInfo_result result = new getOverallBasicInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOverallBasicInfo_args args, AsyncMethodCallback<DeviceOverallInfo> resultHandler) throws TException {
        iface.getOverallBasicInfo(resultHandler);
      }
    }

    public static class getOverallCpuInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOverallCpuInfo_args, String> {
      public getOverallCpuInfo() {
        super("getOverallCpuInfo");
      }

      public getOverallCpuInfo_args getEmptyArgsInstance() {
        return new getOverallCpuInfo_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getOverallCpuInfo_result result = new getOverallCpuInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOverallCpuInfo_result result = new getOverallCpuInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOverallCpuInfo_args args, AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getOverallCpuInfo(resultHandler);
      }
    }

    public static class getOverallRamFreeMemoryInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOverallRamFreeMemoryInfo_args, String> {
      public getOverallRamFreeMemoryInfo() {
        super("getOverallRamFreeMemoryInfo");
      }

      public getOverallRamFreeMemoryInfo_args getEmptyArgsInstance() {
        return new getOverallRamFreeMemoryInfo_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getOverallRamFreeMemoryInfo_result result = new getOverallRamFreeMemoryInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOverallRamFreeMemoryInfo_result result = new getOverallRamFreeMemoryInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOverallRamFreeMemoryInfo_args args, AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getOverallRamFreeMemoryInfo(resultHandler);
      }
    }

    public static class getOverallRamUsedMemoryInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOverallRamUsedMemoryInfo_args, String> {
      public getOverallRamUsedMemoryInfo() {
        super("getOverallRamUsedMemoryInfo");
      }

      public getOverallRamUsedMemoryInfo_args getEmptyArgsInstance() {
        return new getOverallRamUsedMemoryInfo_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getOverallRamUsedMemoryInfo_result result = new getOverallRamUsedMemoryInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOverallRamUsedMemoryInfo_result result = new getOverallRamUsedMemoryInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOverallRamUsedMemoryInfo_args args, AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getOverallRamUsedMemoryInfo(resultHandler);
      }
    }

    public static class getBattery<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBattery_args, String> {
      public getBattery() {
        super("getBattery");
      }

      public getBattery_args getEmptyArgsInstance() {
        return new getBattery_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getBattery_result result = new getBattery_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getBattery_result result = new getBattery_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBattery_args args, AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getBattery(resultHandler);
      }
    }

    public static class getAllRunningProcessesWithInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllRunningProcessesWithInfo_args, List<TProcessInfo>> {
      public getAllRunningProcessesWithInfo() {
        super("getAllRunningProcessesWithInfo");
      }

      public getAllRunningProcessesWithInfo_args getEmptyArgsInstance() {
        return new getAllRunningProcessesWithInfo_args();
      }

      public AsyncMethodCallback<List<TProcessInfo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<TProcessInfo>>() { 
          public void onComplete(List<TProcessInfo> o) {
            getAllRunningProcessesWithInfo_result result = new getAllRunningProcessesWithInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAllRunningProcessesWithInfo_result result = new getAllRunningProcessesWithInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllRunningProcessesWithInfo_args args, AsyncMethodCallback<List<TProcessInfo>> resultHandler) throws TException {
        iface.getAllRunningProcessesWithInfo(resultHandler);
      }
    }

    public static class getSensorDetails<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSensorDetails_args, List<SensorDetails>> {
      public getSensorDetails() {
        super("getSensorDetails");
      }

      public getSensorDetails_args getEmptyArgsInstance() {
        return new getSensorDetails_args();
      }

      public AsyncMethodCallback<List<SensorDetails>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<SensorDetails>>() { 
          public void onComplete(List<SensorDetails> o) {
            getSensorDetails_result result = new getSensorDetails_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSensorDetails_result result = new getSensorDetails_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSensorDetails_args args, AsyncMethodCallback<List<SensorDetails>> resultHandler) throws TException {
        iface.getSensorDetails(resultHandler);
      }
    }

    public static class getFilteredProcessInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFilteredProcessInfo_args, List<TProcessInfo>> {
      public getFilteredProcessInfo() {
        super("getFilteredProcessInfo");
      }

      public getFilteredProcessInfo_args getEmptyArgsInstance() {
        return new getFilteredProcessInfo_args();
      }

      public AsyncMethodCallback<List<TProcessInfo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<TProcessInfo>>() { 
          public void onComplete(List<TProcessInfo> o) {
            getFilteredProcessInfo_result result = new getFilteredProcessInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getFilteredProcessInfo_result result = new getFilteredProcessInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFilteredProcessInfo_args args, AsyncMethodCallback<List<TProcessInfo>> resultHandler) throws TException {
        iface.getFilteredProcessInfo(args.cpuUsage, args.ramUsage, args.processName,resultHandler);
      }
    }

    public static class testNetwork<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, testNetwork_args, Boolean> {
      public testNetwork() {
        super("testNetwork");
      }

      public testNetwork_args getEmptyArgsInstance() {
        return new testNetwork_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            testNetwork_result result = new testNetwork_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            testNetwork_result result = new testNetwork_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, testNetwork_args args, AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.testNetwork(args.data,resultHandler);
      }
    }

    public static class deployCommand<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deployCommand_args, Boolean> {
      public deployCommand() {
        super("deployCommand");
      }

      public deployCommand_args getEmptyArgsInstance() {
        return new deployCommand_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            deployCommand_result result = new deployCommand_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deployCommand_result result = new deployCommand_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deployCommand_args args, AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.deployCommand(args.cpuUsage, args.ramUsage, args.receiveData, args.sentData, args.timeInterval, args.process,resultHandler);
      }
    }

  }

  public static class getAllRunningProcesses_args implements org.apache.thrift.TBase<getAllRunningProcesses_args, getAllRunningProcesses_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllRunningProcesses_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllRunningProcesses_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllRunningProcesses_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllRunningProcesses_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllRunningProcesses_args.class, metaDataMap);
    }

    public getAllRunningProcesses_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllRunningProcesses_args(getAllRunningProcesses_args other) {
    }

    public getAllRunningProcesses_args deepCopy() {
      return new getAllRunningProcesses_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllRunningProcesses_args)
        return this.equals((getAllRunningProcesses_args)that);
      return false;
    }

    public boolean equals(getAllRunningProcesses_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllRunningProcesses_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllRunningProcesses_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllRunningProcesses_argsStandardSchemeFactory implements SchemeFactory {
      public getAllRunningProcesses_argsStandardScheme getScheme() {
        return new getAllRunningProcesses_argsStandardScheme();
      }
    }

    private static class getAllRunningProcesses_argsStandardScheme extends StandardScheme<getAllRunningProcesses_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllRunningProcesses_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllRunningProcesses_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllRunningProcesses_argsTupleSchemeFactory implements SchemeFactory {
      public getAllRunningProcesses_argsTupleScheme getScheme() {
        return new getAllRunningProcesses_argsTupleScheme();
      }
    }

    private static class getAllRunningProcesses_argsTupleScheme extends TupleScheme<getAllRunningProcesses_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllRunningProcesses_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllRunningProcesses_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getAllRunningProcesses_result implements org.apache.thrift.TBase<getAllRunningProcesses_result, getAllRunningProcesses_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllRunningProcesses_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllRunningProcesses_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllRunningProcesses_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllRunningProcesses_resultTupleSchemeFactory());
    }

    public List<TProcessInfo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TProcessInfo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllRunningProcesses_result.class, metaDataMap);
    }

    public getAllRunningProcesses_result() {
    }

    public getAllRunningProcesses_result(
      List<TProcessInfo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllRunningProcesses_result(getAllRunningProcesses_result other) {
      if (other.isSetSuccess()) {
        List<TProcessInfo> __this__success = new ArrayList<TProcessInfo>(other.success.size());
        for (TProcessInfo other_element : other.success) {
          __this__success.add(new TProcessInfo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getAllRunningProcesses_result deepCopy() {
      return new getAllRunningProcesses_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TProcessInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TProcessInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<TProcessInfo>();
      }
      this.success.add(elem);
    }

    public List<TProcessInfo> getSuccess() {
      return this.success;
    }

    public getAllRunningProcesses_result setSuccess(List<TProcessInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TProcessInfo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllRunningProcesses_result)
        return this.equals((getAllRunningProcesses_result)that);
      return false;
    }

    public boolean equals(getAllRunningProcesses_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllRunningProcesses_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllRunningProcesses_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllRunningProcesses_resultStandardSchemeFactory implements SchemeFactory {
      public getAllRunningProcesses_resultStandardScheme getScheme() {
        return new getAllRunningProcesses_resultStandardScheme();
      }
    }

    private static class getAllRunningProcesses_resultStandardScheme extends StandardScheme<getAllRunningProcesses_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllRunningProcesses_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<TProcessInfo>(_list0.size);
                  TProcessInfo _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new TProcessInfo();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllRunningProcesses_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TProcessInfo _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllRunningProcesses_resultTupleSchemeFactory implements SchemeFactory {
      public getAllRunningProcesses_resultTupleScheme getScheme() {
        return new getAllRunningProcesses_resultTupleScheme();
      }
    }

    private static class getAllRunningProcesses_resultTupleScheme extends TupleScheme<getAllRunningProcesses_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllRunningProcesses_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TProcessInfo _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllRunningProcesses_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<TProcessInfo>(_list5.size);
            TProcessInfo _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new TProcessInfo();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getRAMUsageInfo_args implements org.apache.thrift.TBase<getRAMUsageInfo_args, getRAMUsageInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRAMUsageInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRAMUsageInfo_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRAMUsageInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRAMUsageInfo_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRAMUsageInfo_args.class, metaDataMap);
    }

    public getRAMUsageInfo_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRAMUsageInfo_args(getRAMUsageInfo_args other) {
    }

    public getRAMUsageInfo_args deepCopy() {
      return new getRAMUsageInfo_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRAMUsageInfo_args)
        return this.equals((getRAMUsageInfo_args)that);
      return false;
    }

    public boolean equals(getRAMUsageInfo_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(getRAMUsageInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRAMUsageInfo_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRAMUsageInfo_argsStandardSchemeFactory implements SchemeFactory {
      public getRAMUsageInfo_argsStandardScheme getScheme() {
        return new getRAMUsageInfo_argsStandardScheme();
      }
    }

    private static class getRAMUsageInfo_argsStandardScheme extends StandardScheme<getRAMUsageInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRAMUsageInfo_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRAMUsageInfo_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRAMUsageInfo_argsTupleSchemeFactory implements SchemeFactory {
      public getRAMUsageInfo_argsTupleScheme getScheme() {
        return new getRAMUsageInfo_argsTupleScheme();
      }
    }

    private static class getRAMUsageInfo_argsTupleScheme extends TupleScheme<getRAMUsageInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRAMUsageInfo_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRAMUsageInfo_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getRAMUsageInfo_result implements org.apache.thrift.TBase<getRAMUsageInfo_result, getRAMUsageInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRAMUsageInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRAMUsageInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRAMUsageInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRAMUsageInfo_resultTupleSchemeFactory());
    }

    public List<TProcessInfo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TProcessInfo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRAMUsageInfo_result.class, metaDataMap);
    }

    public getRAMUsageInfo_result() {
    }

    public getRAMUsageInfo_result(
      List<TProcessInfo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRAMUsageInfo_result(getRAMUsageInfo_result other) {
      if (other.isSetSuccess()) {
        List<TProcessInfo> __this__success = new ArrayList<TProcessInfo>(other.success.size());
        for (TProcessInfo other_element : other.success) {
          __this__success.add(new TProcessInfo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getRAMUsageInfo_result deepCopy() {
      return new getRAMUsageInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TProcessInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TProcessInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<TProcessInfo>();
      }
      this.success.add(elem);
    }

    public List<TProcessInfo> getSuccess() {
      return this.success;
    }

    public getRAMUsageInfo_result setSuccess(List<TProcessInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TProcessInfo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRAMUsageInfo_result)
        return this.equals((getRAMUsageInfo_result)that);
      return false;
    }

    public boolean equals(getRAMUsageInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRAMUsageInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRAMUsageInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRAMUsageInfo_resultStandardSchemeFactory implements SchemeFactory {
      public getRAMUsageInfo_resultStandardScheme getScheme() {
        return new getRAMUsageInfo_resultStandardScheme();
      }
    }

    private static class getRAMUsageInfo_resultStandardScheme extends StandardScheme<getRAMUsageInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRAMUsageInfo_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<TProcessInfo>(_list8.size);
                  TProcessInfo _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new TProcessInfo();
                    _elem9.read(iprot);
                    struct.success.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRAMUsageInfo_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TProcessInfo _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRAMUsageInfo_resultTupleSchemeFactory implements SchemeFactory {
      public getRAMUsageInfo_resultTupleScheme getScheme() {
        return new getRAMUsageInfo_resultTupleScheme();
      }
    }

    private static class getRAMUsageInfo_resultTupleScheme extends TupleScheme<getRAMUsageInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRAMUsageInfo_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TProcessInfo _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRAMUsageInfo_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<TProcessInfo>(_list13.size);
            TProcessInfo _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new TProcessInfo();
              _elem14.read(iprot);
              struct.success.add(_elem14);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getCPUUsageInfo_args implements org.apache.thrift.TBase<getCPUUsageInfo_args, getCPUUsageInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCPUUsageInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCPUUsageInfo_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCPUUsageInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCPUUsageInfo_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCPUUsageInfo_args.class, metaDataMap);
    }

    public getCPUUsageInfo_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCPUUsageInfo_args(getCPUUsageInfo_args other) {
    }

    public getCPUUsageInfo_args deepCopy() {
      return new getCPUUsageInfo_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCPUUsageInfo_args)
        return this.equals((getCPUUsageInfo_args)that);
      return false;
    }

    public boolean equals(getCPUUsageInfo_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(getCPUUsageInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCPUUsageInfo_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCPUUsageInfo_argsStandardSchemeFactory implements SchemeFactory {
      public getCPUUsageInfo_argsStandardScheme getScheme() {
        return new getCPUUsageInfo_argsStandardScheme();
      }
    }

    private static class getCPUUsageInfo_argsStandardScheme extends StandardScheme<getCPUUsageInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCPUUsageInfo_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCPUUsageInfo_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCPUUsageInfo_argsTupleSchemeFactory implements SchemeFactory {
      public getCPUUsageInfo_argsTupleScheme getScheme() {
        return new getCPUUsageInfo_argsTupleScheme();
      }
    }

    private static class getCPUUsageInfo_argsTupleScheme extends TupleScheme<getCPUUsageInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCPUUsageInfo_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCPUUsageInfo_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getCPUUsageInfo_result implements org.apache.thrift.TBase<getCPUUsageInfo_result, getCPUUsageInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCPUUsageInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCPUUsageInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCPUUsageInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCPUUsageInfo_resultTupleSchemeFactory());
    }

    public List<TProcessInfo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TProcessInfo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCPUUsageInfo_result.class, metaDataMap);
    }

    public getCPUUsageInfo_result() {
    }

    public getCPUUsageInfo_result(
      List<TProcessInfo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCPUUsageInfo_result(getCPUUsageInfo_result other) {
      if (other.isSetSuccess()) {
        List<TProcessInfo> __this__success = new ArrayList<TProcessInfo>(other.success.size());
        for (TProcessInfo other_element : other.success) {
          __this__success.add(new TProcessInfo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getCPUUsageInfo_result deepCopy() {
      return new getCPUUsageInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TProcessInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TProcessInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<TProcessInfo>();
      }
      this.success.add(elem);
    }

    public List<TProcessInfo> getSuccess() {
      return this.success;
    }

    public getCPUUsageInfo_result setSuccess(List<TProcessInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TProcessInfo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCPUUsageInfo_result)
        return this.equals((getCPUUsageInfo_result)that);
      return false;
    }

    public boolean equals(getCPUUsageInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCPUUsageInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCPUUsageInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCPUUsageInfo_resultStandardSchemeFactory implements SchemeFactory {
      public getCPUUsageInfo_resultStandardScheme getScheme() {
        return new getCPUUsageInfo_resultStandardScheme();
      }
    }

    private static class getCPUUsageInfo_resultStandardScheme extends StandardScheme<getCPUUsageInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCPUUsageInfo_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<TProcessInfo>(_list16.size);
                  TProcessInfo _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = new TProcessInfo();
                    _elem17.read(iprot);
                    struct.success.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCPUUsageInfo_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TProcessInfo _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCPUUsageInfo_resultTupleSchemeFactory implements SchemeFactory {
      public getCPUUsageInfo_resultTupleScheme getScheme() {
        return new getCPUUsageInfo_resultTupleScheme();
      }
    }

    private static class getCPUUsageInfo_resultTupleScheme extends TupleScheme<getCPUUsageInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCPUUsageInfo_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TProcessInfo _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCPUUsageInfo_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<TProcessInfo>(_list21.size);
            TProcessInfo _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = new TProcessInfo();
              _elem22.read(iprot);
              struct.success.add(_elem22);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getInternetUsage_args implements org.apache.thrift.TBase<getInternetUsage_args, getInternetUsage_args._Fields>, java.io.Serializable, Cloneable, Comparable<getInternetUsage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getInternetUsage_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getInternetUsage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getInternetUsage_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getInternetUsage_args.class, metaDataMap);
    }

    public getInternetUsage_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getInternetUsage_args(getInternetUsage_args other) {
    }

    public getInternetUsage_args deepCopy() {
      return new getInternetUsage_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getInternetUsage_args)
        return this.equals((getInternetUsage_args)that);
      return false;
    }

    public boolean equals(getInternetUsage_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(getInternetUsage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getInternetUsage_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getInternetUsage_argsStandardSchemeFactory implements SchemeFactory {
      public getInternetUsage_argsStandardScheme getScheme() {
        return new getInternetUsage_argsStandardScheme();
      }
    }

    private static class getInternetUsage_argsStandardScheme extends StandardScheme<getInternetUsage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getInternetUsage_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getInternetUsage_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getInternetUsage_argsTupleSchemeFactory implements SchemeFactory {
      public getInternetUsage_argsTupleScheme getScheme() {
        return new getInternetUsage_argsTupleScheme();
      }
    }

    private static class getInternetUsage_argsTupleScheme extends TupleScheme<getInternetUsage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getInternetUsage_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getInternetUsage_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getInternetUsage_result implements org.apache.thrift.TBase<getInternetUsage_result, getInternetUsage_result._Fields>, java.io.Serializable, Cloneable, Comparable<getInternetUsage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getInternetUsage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getInternetUsage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getInternetUsage_resultTupleSchemeFactory());
    }

    public List<TProcessInfo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TProcessInfo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getInternetUsage_result.class, metaDataMap);
    }

    public getInternetUsage_result() {
    }

    public getInternetUsage_result(
      List<TProcessInfo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getInternetUsage_result(getInternetUsage_result other) {
      if (other.isSetSuccess()) {
        List<TProcessInfo> __this__success = new ArrayList<TProcessInfo>(other.success.size());
        for (TProcessInfo other_element : other.success) {
          __this__success.add(new TProcessInfo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getInternetUsage_result deepCopy() {
      return new getInternetUsage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TProcessInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TProcessInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<TProcessInfo>();
      }
      this.success.add(elem);
    }

    public List<TProcessInfo> getSuccess() {
      return this.success;
    }

    public getInternetUsage_result setSuccess(List<TProcessInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TProcessInfo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getInternetUsage_result)
        return this.equals((getInternetUsage_result)that);
      return false;
    }

    public boolean equals(getInternetUsage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getInternetUsage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getInternetUsage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getInternetUsage_resultStandardSchemeFactory implements SchemeFactory {
      public getInternetUsage_resultStandardScheme getScheme() {
        return new getInternetUsage_resultStandardScheme();
      }
    }

    private static class getInternetUsage_resultStandardScheme extends StandardScheme<getInternetUsage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getInternetUsage_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new ArrayList<TProcessInfo>(_list24.size);
                  TProcessInfo _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = new TProcessInfo();
                    _elem25.read(iprot);
                    struct.success.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getInternetUsage_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TProcessInfo _iter27 : struct.success)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getInternetUsage_resultTupleSchemeFactory implements SchemeFactory {
      public getInternetUsage_resultTupleScheme getScheme() {
        return new getInternetUsage_resultTupleScheme();
      }
    }

    private static class getInternetUsage_resultTupleScheme extends TupleScheme<getInternetUsage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getInternetUsage_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TProcessInfo _iter28 : struct.success)
            {
              _iter28.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getInternetUsage_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<TProcessInfo>(_list29.size);
            TProcessInfo _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = new TProcessInfo();
              _elem30.read(iprot);
              struct.success.add(_elem30);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOverallBasicInfo_args implements org.apache.thrift.TBase<getOverallBasicInfo_args, getOverallBasicInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOverallBasicInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOverallBasicInfo_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOverallBasicInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOverallBasicInfo_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOverallBasicInfo_args.class, metaDataMap);
    }

    public getOverallBasicInfo_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOverallBasicInfo_args(getOverallBasicInfo_args other) {
    }

    public getOverallBasicInfo_args deepCopy() {
      return new getOverallBasicInfo_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOverallBasicInfo_args)
        return this.equals((getOverallBasicInfo_args)that);
      return false;
    }

    public boolean equals(getOverallBasicInfo_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(getOverallBasicInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOverallBasicInfo_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOverallBasicInfo_argsStandardSchemeFactory implements SchemeFactory {
      public getOverallBasicInfo_argsStandardScheme getScheme() {
        return new getOverallBasicInfo_argsStandardScheme();
      }
    }

    private static class getOverallBasicInfo_argsStandardScheme extends StandardScheme<getOverallBasicInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOverallBasicInfo_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOverallBasicInfo_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOverallBasicInfo_argsTupleSchemeFactory implements SchemeFactory {
      public getOverallBasicInfo_argsTupleScheme getScheme() {
        return new getOverallBasicInfo_argsTupleScheme();
      }
    }

    private static class getOverallBasicInfo_argsTupleScheme extends TupleScheme<getOverallBasicInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOverallBasicInfo_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOverallBasicInfo_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getOverallBasicInfo_result implements org.apache.thrift.TBase<getOverallBasicInfo_result, getOverallBasicInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOverallBasicInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOverallBasicInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOverallBasicInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOverallBasicInfo_resultTupleSchemeFactory());
    }

    public DeviceOverallInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DeviceOverallInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOverallBasicInfo_result.class, metaDataMap);
    }

    public getOverallBasicInfo_result() {
    }

    public getOverallBasicInfo_result(
      DeviceOverallInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOverallBasicInfo_result(getOverallBasicInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new DeviceOverallInfo(other.success);
      }
    }

    public getOverallBasicInfo_result deepCopy() {
      return new getOverallBasicInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public DeviceOverallInfo getSuccess() {
      return this.success;
    }

    public getOverallBasicInfo_result setSuccess(DeviceOverallInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((DeviceOverallInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOverallBasicInfo_result)
        return this.equals((getOverallBasicInfo_result)that);
      return false;
    }

    public boolean equals(getOverallBasicInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOverallBasicInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOverallBasicInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOverallBasicInfo_resultStandardSchemeFactory implements SchemeFactory {
      public getOverallBasicInfo_resultStandardScheme getScheme() {
        return new getOverallBasicInfo_resultStandardScheme();
      }
    }

    private static class getOverallBasicInfo_resultStandardScheme extends StandardScheme<getOverallBasicInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOverallBasicInfo_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new DeviceOverallInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOverallBasicInfo_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOverallBasicInfo_resultTupleSchemeFactory implements SchemeFactory {
      public getOverallBasicInfo_resultTupleScheme getScheme() {
        return new getOverallBasicInfo_resultTupleScheme();
      }
    }

    private static class getOverallBasicInfo_resultTupleScheme extends TupleScheme<getOverallBasicInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOverallBasicInfo_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOverallBasicInfo_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new DeviceOverallInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOverallCpuInfo_args implements org.apache.thrift.TBase<getOverallCpuInfo_args, getOverallCpuInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOverallCpuInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOverallCpuInfo_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOverallCpuInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOverallCpuInfo_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOverallCpuInfo_args.class, metaDataMap);
    }

    public getOverallCpuInfo_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOverallCpuInfo_args(getOverallCpuInfo_args other) {
    }

    public getOverallCpuInfo_args deepCopy() {
      return new getOverallCpuInfo_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOverallCpuInfo_args)
        return this.equals((getOverallCpuInfo_args)that);
      return false;
    }

    public boolean equals(getOverallCpuInfo_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(getOverallCpuInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOverallCpuInfo_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOverallCpuInfo_argsStandardSchemeFactory implements SchemeFactory {
      public getOverallCpuInfo_argsStandardScheme getScheme() {
        return new getOverallCpuInfo_argsStandardScheme();
      }
    }

    private static class getOverallCpuInfo_argsStandardScheme extends StandardScheme<getOverallCpuInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOverallCpuInfo_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOverallCpuInfo_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOverallCpuInfo_argsTupleSchemeFactory implements SchemeFactory {
      public getOverallCpuInfo_argsTupleScheme getScheme() {
        return new getOverallCpuInfo_argsTupleScheme();
      }
    }

    private static class getOverallCpuInfo_argsTupleScheme extends TupleScheme<getOverallCpuInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOverallCpuInfo_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOverallCpuInfo_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getOverallCpuInfo_result implements org.apache.thrift.TBase<getOverallCpuInfo_result, getOverallCpuInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOverallCpuInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOverallCpuInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOverallCpuInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOverallCpuInfo_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOverallCpuInfo_result.class, metaDataMap);
    }

    public getOverallCpuInfo_result() {
    }

    public getOverallCpuInfo_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOverallCpuInfo_result(getOverallCpuInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getOverallCpuInfo_result deepCopy() {
      return new getOverallCpuInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getOverallCpuInfo_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOverallCpuInfo_result)
        return this.equals((getOverallCpuInfo_result)that);
      return false;
    }

    public boolean equals(getOverallCpuInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOverallCpuInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOverallCpuInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOverallCpuInfo_resultStandardSchemeFactory implements SchemeFactory {
      public getOverallCpuInfo_resultStandardScheme getScheme() {
        return new getOverallCpuInfo_resultStandardScheme();
      }
    }

    private static class getOverallCpuInfo_resultStandardScheme extends StandardScheme<getOverallCpuInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOverallCpuInfo_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOverallCpuInfo_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOverallCpuInfo_resultTupleSchemeFactory implements SchemeFactory {
      public getOverallCpuInfo_resultTupleScheme getScheme() {
        return new getOverallCpuInfo_resultTupleScheme();
      }
    }

    private static class getOverallCpuInfo_resultTupleScheme extends TupleScheme<getOverallCpuInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOverallCpuInfo_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOverallCpuInfo_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOverallRamFreeMemoryInfo_args implements org.apache.thrift.TBase<getOverallRamFreeMemoryInfo_args, getOverallRamFreeMemoryInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOverallRamFreeMemoryInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOverallRamFreeMemoryInfo_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOverallRamFreeMemoryInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOverallRamFreeMemoryInfo_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOverallRamFreeMemoryInfo_args.class, metaDataMap);
    }

    public getOverallRamFreeMemoryInfo_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOverallRamFreeMemoryInfo_args(getOverallRamFreeMemoryInfo_args other) {
    }

    public getOverallRamFreeMemoryInfo_args deepCopy() {
      return new getOverallRamFreeMemoryInfo_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOverallRamFreeMemoryInfo_args)
        return this.equals((getOverallRamFreeMemoryInfo_args)that);
      return false;
    }

    public boolean equals(getOverallRamFreeMemoryInfo_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(getOverallRamFreeMemoryInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOverallRamFreeMemoryInfo_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOverallRamFreeMemoryInfo_argsStandardSchemeFactory implements SchemeFactory {
      public getOverallRamFreeMemoryInfo_argsStandardScheme getScheme() {
        return new getOverallRamFreeMemoryInfo_argsStandardScheme();
      }
    }

    private static class getOverallRamFreeMemoryInfo_argsStandardScheme extends StandardScheme<getOverallRamFreeMemoryInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOverallRamFreeMemoryInfo_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOverallRamFreeMemoryInfo_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOverallRamFreeMemoryInfo_argsTupleSchemeFactory implements SchemeFactory {
      public getOverallRamFreeMemoryInfo_argsTupleScheme getScheme() {
        return new getOverallRamFreeMemoryInfo_argsTupleScheme();
      }
    }

    private static class getOverallRamFreeMemoryInfo_argsTupleScheme extends TupleScheme<getOverallRamFreeMemoryInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOverallRamFreeMemoryInfo_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOverallRamFreeMemoryInfo_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getOverallRamFreeMemoryInfo_result implements org.apache.thrift.TBase<getOverallRamFreeMemoryInfo_result, getOverallRamFreeMemoryInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOverallRamFreeMemoryInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOverallRamFreeMemoryInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOverallRamFreeMemoryInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOverallRamFreeMemoryInfo_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOverallRamFreeMemoryInfo_result.class, metaDataMap);
    }

    public getOverallRamFreeMemoryInfo_result() {
    }

    public getOverallRamFreeMemoryInfo_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOverallRamFreeMemoryInfo_result(getOverallRamFreeMemoryInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getOverallRamFreeMemoryInfo_result deepCopy() {
      return new getOverallRamFreeMemoryInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getOverallRamFreeMemoryInfo_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOverallRamFreeMemoryInfo_result)
        return this.equals((getOverallRamFreeMemoryInfo_result)that);
      return false;
    }

    public boolean equals(getOverallRamFreeMemoryInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOverallRamFreeMemoryInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOverallRamFreeMemoryInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOverallRamFreeMemoryInfo_resultStandardSchemeFactory implements SchemeFactory {
      public getOverallRamFreeMemoryInfo_resultStandardScheme getScheme() {
        return new getOverallRamFreeMemoryInfo_resultStandardScheme();
      }
    }

    private static class getOverallRamFreeMemoryInfo_resultStandardScheme extends StandardScheme<getOverallRamFreeMemoryInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOverallRamFreeMemoryInfo_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOverallRamFreeMemoryInfo_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOverallRamFreeMemoryInfo_resultTupleSchemeFactory implements SchemeFactory {
      public getOverallRamFreeMemoryInfo_resultTupleScheme getScheme() {
        return new getOverallRamFreeMemoryInfo_resultTupleScheme();
      }
    }

    private static class getOverallRamFreeMemoryInfo_resultTupleScheme extends TupleScheme<getOverallRamFreeMemoryInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOverallRamFreeMemoryInfo_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOverallRamFreeMemoryInfo_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOverallRamUsedMemoryInfo_args implements org.apache.thrift.TBase<getOverallRamUsedMemoryInfo_args, getOverallRamUsedMemoryInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOverallRamUsedMemoryInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOverallRamUsedMemoryInfo_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOverallRamUsedMemoryInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOverallRamUsedMemoryInfo_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOverallRamUsedMemoryInfo_args.class, metaDataMap);
    }

    public getOverallRamUsedMemoryInfo_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOverallRamUsedMemoryInfo_args(getOverallRamUsedMemoryInfo_args other) {
    }

    public getOverallRamUsedMemoryInfo_args deepCopy() {
      return new getOverallRamUsedMemoryInfo_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOverallRamUsedMemoryInfo_args)
        return this.equals((getOverallRamUsedMemoryInfo_args)that);
      return false;
    }

    public boolean equals(getOverallRamUsedMemoryInfo_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(getOverallRamUsedMemoryInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOverallRamUsedMemoryInfo_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOverallRamUsedMemoryInfo_argsStandardSchemeFactory implements SchemeFactory {
      public getOverallRamUsedMemoryInfo_argsStandardScheme getScheme() {
        return new getOverallRamUsedMemoryInfo_argsStandardScheme();
      }
    }

    private static class getOverallRamUsedMemoryInfo_argsStandardScheme extends StandardScheme<getOverallRamUsedMemoryInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOverallRamUsedMemoryInfo_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOverallRamUsedMemoryInfo_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOverallRamUsedMemoryInfo_argsTupleSchemeFactory implements SchemeFactory {
      public getOverallRamUsedMemoryInfo_argsTupleScheme getScheme() {
        return new getOverallRamUsedMemoryInfo_argsTupleScheme();
      }
    }

    private static class getOverallRamUsedMemoryInfo_argsTupleScheme extends TupleScheme<getOverallRamUsedMemoryInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOverallRamUsedMemoryInfo_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOverallRamUsedMemoryInfo_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getOverallRamUsedMemoryInfo_result implements org.apache.thrift.TBase<getOverallRamUsedMemoryInfo_result, getOverallRamUsedMemoryInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOverallRamUsedMemoryInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOverallRamUsedMemoryInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOverallRamUsedMemoryInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOverallRamUsedMemoryInfo_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOverallRamUsedMemoryInfo_result.class, metaDataMap);
    }

    public getOverallRamUsedMemoryInfo_result() {
    }

    public getOverallRamUsedMemoryInfo_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOverallRamUsedMemoryInfo_result(getOverallRamUsedMemoryInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getOverallRamUsedMemoryInfo_result deepCopy() {
      return new getOverallRamUsedMemoryInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getOverallRamUsedMemoryInfo_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOverallRamUsedMemoryInfo_result)
        return this.equals((getOverallRamUsedMemoryInfo_result)that);
      return false;
    }

    public boolean equals(getOverallRamUsedMemoryInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOverallRamUsedMemoryInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOverallRamUsedMemoryInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOverallRamUsedMemoryInfo_resultStandardSchemeFactory implements SchemeFactory {
      public getOverallRamUsedMemoryInfo_resultStandardScheme getScheme() {
        return new getOverallRamUsedMemoryInfo_resultStandardScheme();
      }
    }

    private static class getOverallRamUsedMemoryInfo_resultStandardScheme extends StandardScheme<getOverallRamUsedMemoryInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOverallRamUsedMemoryInfo_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOverallRamUsedMemoryInfo_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOverallRamUsedMemoryInfo_resultTupleSchemeFactory implements SchemeFactory {
      public getOverallRamUsedMemoryInfo_resultTupleScheme getScheme() {
        return new getOverallRamUsedMemoryInfo_resultTupleScheme();
      }
    }

    private static class getOverallRamUsedMemoryInfo_resultTupleScheme extends TupleScheme<getOverallRamUsedMemoryInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOverallRamUsedMemoryInfo_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOverallRamUsedMemoryInfo_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getBattery_args implements org.apache.thrift.TBase<getBattery_args, getBattery_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBattery_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBattery_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBattery_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBattery_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBattery_args.class, metaDataMap);
    }

    public getBattery_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBattery_args(getBattery_args other) {
    }

    public getBattery_args deepCopy() {
      return new getBattery_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBattery_args)
        return this.equals((getBattery_args)that);
      return false;
    }

    public boolean equals(getBattery_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(getBattery_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBattery_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBattery_argsStandardSchemeFactory implements SchemeFactory {
      public getBattery_argsStandardScheme getScheme() {
        return new getBattery_argsStandardScheme();
      }
    }

    private static class getBattery_argsStandardScheme extends StandardScheme<getBattery_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBattery_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBattery_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBattery_argsTupleSchemeFactory implements SchemeFactory {
      public getBattery_argsTupleScheme getScheme() {
        return new getBattery_argsTupleScheme();
      }
    }

    private static class getBattery_argsTupleScheme extends TupleScheme<getBattery_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBattery_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBattery_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getBattery_result implements org.apache.thrift.TBase<getBattery_result, getBattery_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBattery_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBattery_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBattery_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBattery_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBattery_result.class, metaDataMap);
    }

    public getBattery_result() {
    }

    public getBattery_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBattery_result(getBattery_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getBattery_result deepCopy() {
      return new getBattery_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getBattery_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBattery_result)
        return this.equals((getBattery_result)that);
      return false;
    }

    public boolean equals(getBattery_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBattery_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBattery_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBattery_resultStandardSchemeFactory implements SchemeFactory {
      public getBattery_resultStandardScheme getScheme() {
        return new getBattery_resultStandardScheme();
      }
    }

    private static class getBattery_resultStandardScheme extends StandardScheme<getBattery_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBattery_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBattery_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBattery_resultTupleSchemeFactory implements SchemeFactory {
      public getBattery_resultTupleScheme getScheme() {
        return new getBattery_resultTupleScheme();
      }
    }

    private static class getBattery_resultTupleScheme extends TupleScheme<getBattery_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBattery_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBattery_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getAllRunningProcessesWithInfo_args implements org.apache.thrift.TBase<getAllRunningProcessesWithInfo_args, getAllRunningProcessesWithInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllRunningProcessesWithInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllRunningProcessesWithInfo_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllRunningProcessesWithInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllRunningProcessesWithInfo_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllRunningProcessesWithInfo_args.class, metaDataMap);
    }

    public getAllRunningProcessesWithInfo_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllRunningProcessesWithInfo_args(getAllRunningProcessesWithInfo_args other) {
    }

    public getAllRunningProcessesWithInfo_args deepCopy() {
      return new getAllRunningProcessesWithInfo_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllRunningProcessesWithInfo_args)
        return this.equals((getAllRunningProcessesWithInfo_args)that);
      return false;
    }

    public boolean equals(getAllRunningProcessesWithInfo_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllRunningProcessesWithInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllRunningProcessesWithInfo_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllRunningProcessesWithInfo_argsStandardSchemeFactory implements SchemeFactory {
      public getAllRunningProcessesWithInfo_argsStandardScheme getScheme() {
        return new getAllRunningProcessesWithInfo_argsStandardScheme();
      }
    }

    private static class getAllRunningProcessesWithInfo_argsStandardScheme extends StandardScheme<getAllRunningProcessesWithInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllRunningProcessesWithInfo_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllRunningProcessesWithInfo_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllRunningProcessesWithInfo_argsTupleSchemeFactory implements SchemeFactory {
      public getAllRunningProcessesWithInfo_argsTupleScheme getScheme() {
        return new getAllRunningProcessesWithInfo_argsTupleScheme();
      }
    }

    private static class getAllRunningProcessesWithInfo_argsTupleScheme extends TupleScheme<getAllRunningProcessesWithInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllRunningProcessesWithInfo_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllRunningProcessesWithInfo_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getAllRunningProcessesWithInfo_result implements org.apache.thrift.TBase<getAllRunningProcessesWithInfo_result, getAllRunningProcessesWithInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllRunningProcessesWithInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllRunningProcessesWithInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllRunningProcessesWithInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllRunningProcessesWithInfo_resultTupleSchemeFactory());
    }

    public List<TProcessInfo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TProcessInfo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllRunningProcessesWithInfo_result.class, metaDataMap);
    }

    public getAllRunningProcessesWithInfo_result() {
    }

    public getAllRunningProcessesWithInfo_result(
      List<TProcessInfo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllRunningProcessesWithInfo_result(getAllRunningProcessesWithInfo_result other) {
      if (other.isSetSuccess()) {
        List<TProcessInfo> __this__success = new ArrayList<TProcessInfo>(other.success.size());
        for (TProcessInfo other_element : other.success) {
          __this__success.add(new TProcessInfo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getAllRunningProcessesWithInfo_result deepCopy() {
      return new getAllRunningProcessesWithInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TProcessInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TProcessInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<TProcessInfo>();
      }
      this.success.add(elem);
    }

    public List<TProcessInfo> getSuccess() {
      return this.success;
    }

    public getAllRunningProcessesWithInfo_result setSuccess(List<TProcessInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TProcessInfo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllRunningProcessesWithInfo_result)
        return this.equals((getAllRunningProcessesWithInfo_result)that);
      return false;
    }

    public boolean equals(getAllRunningProcessesWithInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllRunningProcessesWithInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllRunningProcessesWithInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllRunningProcessesWithInfo_resultStandardSchemeFactory implements SchemeFactory {
      public getAllRunningProcessesWithInfo_resultStandardScheme getScheme() {
        return new getAllRunningProcessesWithInfo_resultStandardScheme();
      }
    }

    private static class getAllRunningProcessesWithInfo_resultStandardScheme extends StandardScheme<getAllRunningProcessesWithInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllRunningProcessesWithInfo_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new ArrayList<TProcessInfo>(_list32.size);
                  TProcessInfo _elem33;
                  for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                  {
                    _elem33 = new TProcessInfo();
                    _elem33.read(iprot);
                    struct.success.add(_elem33);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllRunningProcessesWithInfo_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TProcessInfo _iter35 : struct.success)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllRunningProcessesWithInfo_resultTupleSchemeFactory implements SchemeFactory {
      public getAllRunningProcessesWithInfo_resultTupleScheme getScheme() {
        return new getAllRunningProcessesWithInfo_resultTupleScheme();
      }
    }

    private static class getAllRunningProcessesWithInfo_resultTupleScheme extends TupleScheme<getAllRunningProcessesWithInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllRunningProcessesWithInfo_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TProcessInfo _iter36 : struct.success)
            {
              _iter36.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllRunningProcessesWithInfo_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<TProcessInfo>(_list37.size);
            TProcessInfo _elem38;
            for (int _i39 = 0; _i39 < _list37.size; ++_i39)
            {
              _elem38 = new TProcessInfo();
              _elem38.read(iprot);
              struct.success.add(_elem38);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSensorDetails_args implements org.apache.thrift.TBase<getSensorDetails_args, getSensorDetails_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSensorDetails_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSensorDetails_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSensorDetails_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSensorDetails_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSensorDetails_args.class, metaDataMap);
    }

    public getSensorDetails_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSensorDetails_args(getSensorDetails_args other) {
    }

    public getSensorDetails_args deepCopy() {
      return new getSensorDetails_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSensorDetails_args)
        return this.equals((getSensorDetails_args)that);
      return false;
    }

    public boolean equals(getSensorDetails_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(getSensorDetails_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSensorDetails_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSensorDetails_argsStandardSchemeFactory implements SchemeFactory {
      public getSensorDetails_argsStandardScheme getScheme() {
        return new getSensorDetails_argsStandardScheme();
      }
    }

    private static class getSensorDetails_argsStandardScheme extends StandardScheme<getSensorDetails_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSensorDetails_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSensorDetails_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSensorDetails_argsTupleSchemeFactory implements SchemeFactory {
      public getSensorDetails_argsTupleScheme getScheme() {
        return new getSensorDetails_argsTupleScheme();
      }
    }

    private static class getSensorDetails_argsTupleScheme extends TupleScheme<getSensorDetails_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSensorDetails_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSensorDetails_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getSensorDetails_result implements org.apache.thrift.TBase<getSensorDetails_result, getSensorDetails_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSensorDetails_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSensorDetails_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSensorDetails_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSensorDetails_resultTupleSchemeFactory());
    }

    public List<SensorDetails> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SensorDetails.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSensorDetails_result.class, metaDataMap);
    }

    public getSensorDetails_result() {
    }

    public getSensorDetails_result(
      List<SensorDetails> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSensorDetails_result(getSensorDetails_result other) {
      if (other.isSetSuccess()) {
        List<SensorDetails> __this__success = new ArrayList<SensorDetails>(other.success.size());
        for (SensorDetails other_element : other.success) {
          __this__success.add(new SensorDetails(other_element));
        }
        this.success = __this__success;
      }
    }

    public getSensorDetails_result deepCopy() {
      return new getSensorDetails_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<SensorDetails> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SensorDetails elem) {
      if (this.success == null) {
        this.success = new ArrayList<SensorDetails>();
      }
      this.success.add(elem);
    }

    public List<SensorDetails> getSuccess() {
      return this.success;
    }

    public getSensorDetails_result setSuccess(List<SensorDetails> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<SensorDetails>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSensorDetails_result)
        return this.equals((getSensorDetails_result)that);
      return false;
    }

    public boolean equals(getSensorDetails_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSensorDetails_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSensorDetails_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSensorDetails_resultStandardSchemeFactory implements SchemeFactory {
      public getSensorDetails_resultStandardScheme getScheme() {
        return new getSensorDetails_resultStandardScheme();
      }
    }

    private static class getSensorDetails_resultStandardScheme extends StandardScheme<getSensorDetails_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSensorDetails_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.success = new ArrayList<SensorDetails>(_list40.size);
                  SensorDetails _elem41;
                  for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                  {
                    _elem41 = new SensorDetails();
                    _elem41.read(iprot);
                    struct.success.add(_elem41);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSensorDetails_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SensorDetails _iter43 : struct.success)
            {
              _iter43.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSensorDetails_resultTupleSchemeFactory implements SchemeFactory {
      public getSensorDetails_resultTupleScheme getScheme() {
        return new getSensorDetails_resultTupleScheme();
      }
    }

    private static class getSensorDetails_resultTupleScheme extends TupleScheme<getSensorDetails_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSensorDetails_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SensorDetails _iter44 : struct.success)
            {
              _iter44.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSensorDetails_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<SensorDetails>(_list45.size);
            SensorDetails _elem46;
            for (int _i47 = 0; _i47 < _list45.size; ++_i47)
            {
              _elem46 = new SensorDetails();
              _elem46.read(iprot);
              struct.success.add(_elem46);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getFilteredProcessInfo_args implements org.apache.thrift.TBase<getFilteredProcessInfo_args, getFilteredProcessInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFilteredProcessInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFilteredProcessInfo_args");

    private static final org.apache.thrift.protocol.TField CPU_USAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("cpuUsage", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField RAM_USAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("ramUsage", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PROCESS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("processName", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFilteredProcessInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFilteredProcessInfo_argsTupleSchemeFactory());
    }

    public String cpuUsage; // required
    public String ramUsage; // required
    public String processName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CPU_USAGE((short)1, "cpuUsage"),
      RAM_USAGE((short)2, "ramUsage"),
      PROCESS_NAME((short)3, "processName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CPU_USAGE
            return CPU_USAGE;
          case 2: // RAM_USAGE
            return RAM_USAGE;
          case 3: // PROCESS_NAME
            return PROCESS_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CPU_USAGE, new org.apache.thrift.meta_data.FieldMetaData("cpuUsage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RAM_USAGE, new org.apache.thrift.meta_data.FieldMetaData("ramUsage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PROCESS_NAME, new org.apache.thrift.meta_data.FieldMetaData("processName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFilteredProcessInfo_args.class, metaDataMap);
    }

    public getFilteredProcessInfo_args() {
    }

    public getFilteredProcessInfo_args(
      String cpuUsage,
      String ramUsage,
      String processName)
    {
      this();
      this.cpuUsage = cpuUsage;
      this.ramUsage = ramUsage;
      this.processName = processName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFilteredProcessInfo_args(getFilteredProcessInfo_args other) {
      if (other.isSetCpuUsage()) {
        this.cpuUsage = other.cpuUsage;
      }
      if (other.isSetRamUsage()) {
        this.ramUsage = other.ramUsage;
      }
      if (other.isSetProcessName()) {
        this.processName = other.processName;
      }
    }

    public getFilteredProcessInfo_args deepCopy() {
      return new getFilteredProcessInfo_args(this);
    }

    @Override
    public void clear() {
      this.cpuUsage = null;
      this.ramUsage = null;
      this.processName = null;
    }

    public String getCpuUsage() {
      return this.cpuUsage;
    }

    public getFilteredProcessInfo_args setCpuUsage(String cpuUsage) {
      this.cpuUsage = cpuUsage;
      return this;
    }

    public void unsetCpuUsage() {
      this.cpuUsage = null;
    }

    /** Returns true if field cpuUsage is set (has been assigned a value) and false otherwise */
    public boolean isSetCpuUsage() {
      return this.cpuUsage != null;
    }

    public void setCpuUsageIsSet(boolean value) {
      if (!value) {
        this.cpuUsage = null;
      }
    }

    public String getRamUsage() {
      return this.ramUsage;
    }

    public getFilteredProcessInfo_args setRamUsage(String ramUsage) {
      this.ramUsage = ramUsage;
      return this;
    }

    public void unsetRamUsage() {
      this.ramUsage = null;
    }

    /** Returns true if field ramUsage is set (has been assigned a value) and false otherwise */
    public boolean isSetRamUsage() {
      return this.ramUsage != null;
    }

    public void setRamUsageIsSet(boolean value) {
      if (!value) {
        this.ramUsage = null;
      }
    }

    public String getProcessName() {
      return this.processName;
    }

    public getFilteredProcessInfo_args setProcessName(String processName) {
      this.processName = processName;
      return this;
    }

    public void unsetProcessName() {
      this.processName = null;
    }

    /** Returns true if field processName is set (has been assigned a value) and false otherwise */
    public boolean isSetProcessName() {
      return this.processName != null;
    }

    public void setProcessNameIsSet(boolean value) {
      if (!value) {
        this.processName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CPU_USAGE:
        if (value == null) {
          unsetCpuUsage();
        } else {
          setCpuUsage((String)value);
        }
        break;

      case RAM_USAGE:
        if (value == null) {
          unsetRamUsage();
        } else {
          setRamUsage((String)value);
        }
        break;

      case PROCESS_NAME:
        if (value == null) {
          unsetProcessName();
        } else {
          setProcessName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CPU_USAGE:
        return getCpuUsage();

      case RAM_USAGE:
        return getRamUsage();

      case PROCESS_NAME:
        return getProcessName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CPU_USAGE:
        return isSetCpuUsage();
      case RAM_USAGE:
        return isSetRamUsage();
      case PROCESS_NAME:
        return isSetProcessName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFilteredProcessInfo_args)
        return this.equals((getFilteredProcessInfo_args)that);
      return false;
    }

    public boolean equals(getFilteredProcessInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_cpuUsage = true && this.isSetCpuUsage();
      boolean that_present_cpuUsage = true && that.isSetCpuUsage();
      if (this_present_cpuUsage || that_present_cpuUsage) {
        if (!(this_present_cpuUsage && that_present_cpuUsage))
          return false;
        if (!this.cpuUsage.equals(that.cpuUsage))
          return false;
      }

      boolean this_present_ramUsage = true && this.isSetRamUsage();
      boolean that_present_ramUsage = true && that.isSetRamUsage();
      if (this_present_ramUsage || that_present_ramUsage) {
        if (!(this_present_ramUsage && that_present_ramUsage))
          return false;
        if (!this.ramUsage.equals(that.ramUsage))
          return false;
      }

      boolean this_present_processName = true && this.isSetProcessName();
      boolean that_present_processName = true && that.isSetProcessName();
      if (this_present_processName || that_present_processName) {
        if (!(this_present_processName && that_present_processName))
          return false;
        if (!this.processName.equals(that.processName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cpuUsage = true && (isSetCpuUsage());
      list.add(present_cpuUsage);
      if (present_cpuUsage)
        list.add(cpuUsage);

      boolean present_ramUsage = true && (isSetRamUsage());
      list.add(present_ramUsage);
      if (present_ramUsage)
        list.add(ramUsage);

      boolean present_processName = true && (isSetProcessName());
      list.add(present_processName);
      if (present_processName)
        list.add(processName);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFilteredProcessInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCpuUsage()).compareTo(other.isSetCpuUsage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCpuUsage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpuUsage, other.cpuUsage);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRamUsage()).compareTo(other.isSetRamUsage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRamUsage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ramUsage, other.ramUsage);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProcessName()).compareTo(other.isSetProcessName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProcessName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.processName, other.processName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFilteredProcessInfo_args(");
      boolean first = true;

      sb.append("cpuUsage:");
      if (this.cpuUsage == null) {
        sb.append("null");
      } else {
        sb.append(this.cpuUsage);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ramUsage:");
      if (this.ramUsage == null) {
        sb.append("null");
      } else {
        sb.append(this.ramUsage);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("processName:");
      if (this.processName == null) {
        sb.append("null");
      } else {
        sb.append(this.processName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFilteredProcessInfo_argsStandardSchemeFactory implements SchemeFactory {
      public getFilteredProcessInfo_argsStandardScheme getScheme() {
        return new getFilteredProcessInfo_argsStandardScheme();
      }
    }

    private static class getFilteredProcessInfo_argsStandardScheme extends StandardScheme<getFilteredProcessInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFilteredProcessInfo_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CPU_USAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cpuUsage = iprot.readString();
                struct.setCpuUsageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RAM_USAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ramUsage = iprot.readString();
                struct.setRamUsageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PROCESS_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.processName = iprot.readString();
                struct.setProcessNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFilteredProcessInfo_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cpuUsage != null) {
          oprot.writeFieldBegin(CPU_USAGE_FIELD_DESC);
          oprot.writeString(struct.cpuUsage);
          oprot.writeFieldEnd();
        }
        if (struct.ramUsage != null) {
          oprot.writeFieldBegin(RAM_USAGE_FIELD_DESC);
          oprot.writeString(struct.ramUsage);
          oprot.writeFieldEnd();
        }
        if (struct.processName != null) {
          oprot.writeFieldBegin(PROCESS_NAME_FIELD_DESC);
          oprot.writeString(struct.processName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFilteredProcessInfo_argsTupleSchemeFactory implements SchemeFactory {
      public getFilteredProcessInfo_argsTupleScheme getScheme() {
        return new getFilteredProcessInfo_argsTupleScheme();
      }
    }

    private static class getFilteredProcessInfo_argsTupleScheme extends TupleScheme<getFilteredProcessInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFilteredProcessInfo_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCpuUsage()) {
          optionals.set(0);
        }
        if (struct.isSetRamUsage()) {
          optionals.set(1);
        }
        if (struct.isSetProcessName()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCpuUsage()) {
          oprot.writeString(struct.cpuUsage);
        }
        if (struct.isSetRamUsage()) {
          oprot.writeString(struct.ramUsage);
        }
        if (struct.isSetProcessName()) {
          oprot.writeString(struct.processName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFilteredProcessInfo_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.cpuUsage = iprot.readString();
          struct.setCpuUsageIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ramUsage = iprot.readString();
          struct.setRamUsageIsSet(true);
        }
        if (incoming.get(2)) {
          struct.processName = iprot.readString();
          struct.setProcessNameIsSet(true);
        }
      }
    }

  }

  public static class getFilteredProcessInfo_result implements org.apache.thrift.TBase<getFilteredProcessInfo_result, getFilteredProcessInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFilteredProcessInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFilteredProcessInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFilteredProcessInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFilteredProcessInfo_resultTupleSchemeFactory());
    }

    public List<TProcessInfo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TProcessInfo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFilteredProcessInfo_result.class, metaDataMap);
    }

    public getFilteredProcessInfo_result() {
    }

    public getFilteredProcessInfo_result(
      List<TProcessInfo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFilteredProcessInfo_result(getFilteredProcessInfo_result other) {
      if (other.isSetSuccess()) {
        List<TProcessInfo> __this__success = new ArrayList<TProcessInfo>(other.success.size());
        for (TProcessInfo other_element : other.success) {
          __this__success.add(new TProcessInfo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getFilteredProcessInfo_result deepCopy() {
      return new getFilteredProcessInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TProcessInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TProcessInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<TProcessInfo>();
      }
      this.success.add(elem);
    }

    public List<TProcessInfo> getSuccess() {
      return this.success;
    }

    public getFilteredProcessInfo_result setSuccess(List<TProcessInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TProcessInfo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFilteredProcessInfo_result)
        return this.equals((getFilteredProcessInfo_result)that);
      return false;
    }

    public boolean equals(getFilteredProcessInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFilteredProcessInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFilteredProcessInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFilteredProcessInfo_resultStandardSchemeFactory implements SchemeFactory {
      public getFilteredProcessInfo_resultStandardScheme getScheme() {
        return new getFilteredProcessInfo_resultStandardScheme();
      }
    }

    private static class getFilteredProcessInfo_resultStandardScheme extends StandardScheme<getFilteredProcessInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFilteredProcessInfo_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.success = new ArrayList<TProcessInfo>(_list48.size);
                  TProcessInfo _elem49;
                  for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                  {
                    _elem49 = new TProcessInfo();
                    _elem49.read(iprot);
                    struct.success.add(_elem49);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFilteredProcessInfo_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TProcessInfo _iter51 : struct.success)
            {
              _iter51.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFilteredProcessInfo_resultTupleSchemeFactory implements SchemeFactory {
      public getFilteredProcessInfo_resultTupleScheme getScheme() {
        return new getFilteredProcessInfo_resultTupleScheme();
      }
    }

    private static class getFilteredProcessInfo_resultTupleScheme extends TupleScheme<getFilteredProcessInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFilteredProcessInfo_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TProcessInfo _iter52 : struct.success)
            {
              _iter52.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFilteredProcessInfo_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<TProcessInfo>(_list53.size);
            TProcessInfo _elem54;
            for (int _i55 = 0; _i55 < _list53.size; ++_i55)
            {
              _elem54 = new TProcessInfo();
              _elem54.read(iprot);
              struct.success.add(_elem54);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class testNetwork_args implements org.apache.thrift.TBase<testNetwork_args, testNetwork_args._Fields>, java.io.Serializable, Cloneable, Comparable<testNetwork_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testNetwork_args");

    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new testNetwork_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new testNetwork_argsTupleSchemeFactory());
    }

    public ByteBuffer data; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATA((short)1, "data");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATA
            return DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(testNetwork_args.class, metaDataMap);
    }

    public testNetwork_args() {
    }

    public testNetwork_args(
      ByteBuffer data)
    {
      this();
      this.data = org.apache.thrift.TBaseHelper.copyBinary(data);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public testNetwork_args(testNetwork_args other) {
      if (other.isSetData()) {
        this.data = org.apache.thrift.TBaseHelper.copyBinary(other.data);
      }
    }

    public testNetwork_args deepCopy() {
      return new testNetwork_args(this);
    }

    @Override
    public void clear() {
      this.data = null;
    }

    public byte[] getData() {
      setData(org.apache.thrift.TBaseHelper.rightSize(data));
      return data == null ? null : data.array();
    }

    public ByteBuffer bufferForData() {
      return org.apache.thrift.TBaseHelper.copyBinary(data);
    }

    public testNetwork_args setData(byte[] data) {
      this.data = data == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(data, data.length));
      return this;
    }

    public testNetwork_args setData(ByteBuffer data) {
      this.data = org.apache.thrift.TBaseHelper.copyBinary(data);
      return this;
    }

    public void unsetData() {
      this.data = null;
    }

    /** Returns true if field data is set (has been assigned a value) and false otherwise */
    public boolean isSetData() {
      return this.data != null;
    }

    public void setDataIsSet(boolean value) {
      if (!value) {
        this.data = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATA:
        if (value == null) {
          unsetData();
        } else {
          setData((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATA:
        return getData();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATA:
        return isSetData();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof testNetwork_args)
        return this.equals((testNetwork_args)that);
      return false;
    }

    public boolean equals(testNetwork_args that) {
      if (that == null)
        return false;

      boolean this_present_data = true && this.isSetData();
      boolean that_present_data = true && that.isSetData();
      if (this_present_data || that_present_data) {
        if (!(this_present_data && that_present_data))
          return false;
        if (!this.data.equals(that.data))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_data = true && (isSetData());
      list.add(present_data);
      if (present_data)
        list.add(data);

      return list.hashCode();
    }

    @Override
    public int compareTo(testNetwork_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetData()).compareTo(other.isSetData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("testNetwork_args(");
      boolean first = true;

      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.data, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class testNetwork_argsStandardSchemeFactory implements SchemeFactory {
      public testNetwork_argsStandardScheme getScheme() {
        return new testNetwork_argsStandardScheme();
      }
    }

    private static class testNetwork_argsStandardScheme extends StandardScheme<testNetwork_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, testNetwork_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.data = iprot.readBinary();
                struct.setDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, testNetwork_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.data != null) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          oprot.writeBinary(struct.data);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class testNetwork_argsTupleSchemeFactory implements SchemeFactory {
      public testNetwork_argsTupleScheme getScheme() {
        return new testNetwork_argsTupleScheme();
      }
    }

    private static class testNetwork_argsTupleScheme extends TupleScheme<testNetwork_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, testNetwork_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetData()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetData()) {
          oprot.writeBinary(struct.data);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, testNetwork_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.data = iprot.readBinary();
          struct.setDataIsSet(true);
        }
      }
    }

  }

  public static class testNetwork_result implements org.apache.thrift.TBase<testNetwork_result, testNetwork_result._Fields>, java.io.Serializable, Cloneable, Comparable<testNetwork_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testNetwork_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new testNetwork_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new testNetwork_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(testNetwork_result.class, metaDataMap);
    }

    public testNetwork_result() {
    }

    public testNetwork_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public testNetwork_result(testNetwork_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public testNetwork_result deepCopy() {
      return new testNetwork_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public testNetwork_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof testNetwork_result)
        return this.equals((testNetwork_result)that);
      return false;
    }

    public boolean equals(testNetwork_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(testNetwork_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("testNetwork_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class testNetwork_resultStandardSchemeFactory implements SchemeFactory {
      public testNetwork_resultStandardScheme getScheme() {
        return new testNetwork_resultStandardScheme();
      }
    }

    private static class testNetwork_resultStandardScheme extends StandardScheme<testNetwork_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, testNetwork_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, testNetwork_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class testNetwork_resultTupleSchemeFactory implements SchemeFactory {
      public testNetwork_resultTupleScheme getScheme() {
        return new testNetwork_resultTupleScheme();
      }
    }

    private static class testNetwork_resultTupleScheme extends TupleScheme<testNetwork_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, testNetwork_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, testNetwork_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deployCommand_args implements org.apache.thrift.TBase<deployCommand_args, deployCommand_args._Fields>, java.io.Serializable, Cloneable, Comparable<deployCommand_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deployCommand_args");

    private static final org.apache.thrift.protocol.TField CPU_USAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("cpuUsage", org.apache.thrift.protocol.TType.I16, (short)1);
    private static final org.apache.thrift.protocol.TField RAM_USAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("ramUsage", org.apache.thrift.protocol.TType.I16, (short)2);
    private static final org.apache.thrift.protocol.TField RECEIVE_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("receiveData", org.apache.thrift.protocol.TType.I16, (short)3);
    private static final org.apache.thrift.protocol.TField SENT_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("sentData", org.apache.thrift.protocol.TType.I16, (short)4);
    private static final org.apache.thrift.protocol.TField TIME_INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("timeInterval", org.apache.thrift.protocol.TType.I16, (short)5);
    private static final org.apache.thrift.protocol.TField PROCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("process", org.apache.thrift.protocol.TType.STRING, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deployCommand_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deployCommand_argsTupleSchemeFactory());
    }

    public short cpuUsage; // required
    public short ramUsage; // required
    public short receiveData; // required
    public short sentData; // required
    public short timeInterval; // required
    public String process; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CPU_USAGE((short)1, "cpuUsage"),
      RAM_USAGE((short)2, "ramUsage"),
      RECEIVE_DATA((short)3, "receiveData"),
      SENT_DATA((short)4, "sentData"),
      TIME_INTERVAL((short)5, "timeInterval"),
      PROCESS((short)6, "process");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CPU_USAGE
            return CPU_USAGE;
          case 2: // RAM_USAGE
            return RAM_USAGE;
          case 3: // RECEIVE_DATA
            return RECEIVE_DATA;
          case 4: // SENT_DATA
            return SENT_DATA;
          case 5: // TIME_INTERVAL
            return TIME_INTERVAL;
          case 6: // PROCESS
            return PROCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CPUUSAGE_ISSET_ID = 0;
    private static final int __RAMUSAGE_ISSET_ID = 1;
    private static final int __RECEIVEDATA_ISSET_ID = 2;
    private static final int __SENTDATA_ISSET_ID = 3;
    private static final int __TIMEINTERVAL_ISSET_ID = 4;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CPU_USAGE, new org.apache.thrift.meta_data.FieldMetaData("cpuUsage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      tmpMap.put(_Fields.RAM_USAGE, new org.apache.thrift.meta_data.FieldMetaData("ramUsage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      tmpMap.put(_Fields.RECEIVE_DATA, new org.apache.thrift.meta_data.FieldMetaData("receiveData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      tmpMap.put(_Fields.SENT_DATA, new org.apache.thrift.meta_data.FieldMetaData("sentData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      tmpMap.put(_Fields.TIME_INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("timeInterval", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      tmpMap.put(_Fields.PROCESS, new org.apache.thrift.meta_data.FieldMetaData("process", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deployCommand_args.class, metaDataMap);
    }

    public deployCommand_args() {
    }

    public deployCommand_args(
      short cpuUsage,
      short ramUsage,
      short receiveData,
      short sentData,
      short timeInterval,
      String process)
    {
      this();
      this.cpuUsage = cpuUsage;
      setCpuUsageIsSet(true);
      this.ramUsage = ramUsage;
      setRamUsageIsSet(true);
      this.receiveData = receiveData;
      setReceiveDataIsSet(true);
      this.sentData = sentData;
      setSentDataIsSet(true);
      this.timeInterval = timeInterval;
      setTimeIntervalIsSet(true);
      this.process = process;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deployCommand_args(deployCommand_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cpuUsage = other.cpuUsage;
      this.ramUsage = other.ramUsage;
      this.receiveData = other.receiveData;
      this.sentData = other.sentData;
      this.timeInterval = other.timeInterval;
      if (other.isSetProcess()) {
        this.process = other.process;
      }
    }

    public deployCommand_args deepCopy() {
      return new deployCommand_args(this);
    }

    @Override
    public void clear() {
      setCpuUsageIsSet(false);
      this.cpuUsage = 0;
      setRamUsageIsSet(false);
      this.ramUsage = 0;
      setReceiveDataIsSet(false);
      this.receiveData = 0;
      setSentDataIsSet(false);
      this.sentData = 0;
      setTimeIntervalIsSet(false);
      this.timeInterval = 0;
      this.process = null;
    }

    public short getCpuUsage() {
      return this.cpuUsage;
    }

    public deployCommand_args setCpuUsage(short cpuUsage) {
      this.cpuUsage = cpuUsage;
      setCpuUsageIsSet(true);
      return this;
    }

    public void unsetCpuUsage() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CPUUSAGE_ISSET_ID);
    }

    /** Returns true if field cpuUsage is set (has been assigned a value) and false otherwise */
    public boolean isSetCpuUsage() {
      return EncodingUtils.testBit(__isset_bitfield, __CPUUSAGE_ISSET_ID);
    }

    public void setCpuUsageIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CPUUSAGE_ISSET_ID, value);
    }

    public short getRamUsage() {
      return this.ramUsage;
    }

    public deployCommand_args setRamUsage(short ramUsage) {
      this.ramUsage = ramUsage;
      setRamUsageIsSet(true);
      return this;
    }

    public void unsetRamUsage() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RAMUSAGE_ISSET_ID);
    }

    /** Returns true if field ramUsage is set (has been assigned a value) and false otherwise */
    public boolean isSetRamUsage() {
      return EncodingUtils.testBit(__isset_bitfield, __RAMUSAGE_ISSET_ID);
    }

    public void setRamUsageIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RAMUSAGE_ISSET_ID, value);
    }

    public short getReceiveData() {
      return this.receiveData;
    }

    public deployCommand_args setReceiveData(short receiveData) {
      this.receiveData = receiveData;
      setReceiveDataIsSet(true);
      return this;
    }

    public void unsetReceiveData() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECEIVEDATA_ISSET_ID);
    }

    /** Returns true if field receiveData is set (has been assigned a value) and false otherwise */
    public boolean isSetReceiveData() {
      return EncodingUtils.testBit(__isset_bitfield, __RECEIVEDATA_ISSET_ID);
    }

    public void setReceiveDataIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECEIVEDATA_ISSET_ID, value);
    }

    public short getSentData() {
      return this.sentData;
    }

    public deployCommand_args setSentData(short sentData) {
      this.sentData = sentData;
      setSentDataIsSet(true);
      return this;
    }

    public void unsetSentData() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SENTDATA_ISSET_ID);
    }

    /** Returns true if field sentData is set (has been assigned a value) and false otherwise */
    public boolean isSetSentData() {
      return EncodingUtils.testBit(__isset_bitfield, __SENTDATA_ISSET_ID);
    }

    public void setSentDataIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SENTDATA_ISSET_ID, value);
    }

    public short getTimeInterval() {
      return this.timeInterval;
    }

    public deployCommand_args setTimeInterval(short timeInterval) {
      this.timeInterval = timeInterval;
      setTimeIntervalIsSet(true);
      return this;
    }

    public void unsetTimeInterval() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMEINTERVAL_ISSET_ID);
    }

    /** Returns true if field timeInterval is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeInterval() {
      return EncodingUtils.testBit(__isset_bitfield, __TIMEINTERVAL_ISSET_ID);
    }

    public void setTimeIntervalIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMEINTERVAL_ISSET_ID, value);
    }

    public String getProcess() {
      return this.process;
    }

    public deployCommand_args setProcess(String process) {
      this.process = process;
      return this;
    }

    public void unsetProcess() {
      this.process = null;
    }

    /** Returns true if field process is set (has been assigned a value) and false otherwise */
    public boolean isSetProcess() {
      return this.process != null;
    }

    public void setProcessIsSet(boolean value) {
      if (!value) {
        this.process = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CPU_USAGE:
        if (value == null) {
          unsetCpuUsage();
        } else {
          setCpuUsage((Short)value);
        }
        break;

      case RAM_USAGE:
        if (value == null) {
          unsetRamUsage();
        } else {
          setRamUsage((Short)value);
        }
        break;

      case RECEIVE_DATA:
        if (value == null) {
          unsetReceiveData();
        } else {
          setReceiveData((Short)value);
        }
        break;

      case SENT_DATA:
        if (value == null) {
          unsetSentData();
        } else {
          setSentData((Short)value);
        }
        break;

      case TIME_INTERVAL:
        if (value == null) {
          unsetTimeInterval();
        } else {
          setTimeInterval((Short)value);
        }
        break;

      case PROCESS:
        if (value == null) {
          unsetProcess();
        } else {
          setProcess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CPU_USAGE:
        return Short.valueOf(getCpuUsage());

      case RAM_USAGE:
        return Short.valueOf(getRamUsage());

      case RECEIVE_DATA:
        return Short.valueOf(getReceiveData());

      case SENT_DATA:
        return Short.valueOf(getSentData());

      case TIME_INTERVAL:
        return Short.valueOf(getTimeInterval());

      case PROCESS:
        return getProcess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CPU_USAGE:
        return isSetCpuUsage();
      case RAM_USAGE:
        return isSetRamUsage();
      case RECEIVE_DATA:
        return isSetReceiveData();
      case SENT_DATA:
        return isSetSentData();
      case TIME_INTERVAL:
        return isSetTimeInterval();
      case PROCESS:
        return isSetProcess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deployCommand_args)
        return this.equals((deployCommand_args)that);
      return false;
    }

    public boolean equals(deployCommand_args that) {
      if (that == null)
        return false;

      boolean this_present_cpuUsage = true;
      boolean that_present_cpuUsage = true;
      if (this_present_cpuUsage || that_present_cpuUsage) {
        if (!(this_present_cpuUsage && that_present_cpuUsage))
          return false;
        if (this.cpuUsage != that.cpuUsage)
          return false;
      }

      boolean this_present_ramUsage = true;
      boolean that_present_ramUsage = true;
      if (this_present_ramUsage || that_present_ramUsage) {
        if (!(this_present_ramUsage && that_present_ramUsage))
          return false;
        if (this.ramUsage != that.ramUsage)
          return false;
      }

      boolean this_present_receiveData = true;
      boolean that_present_receiveData = true;
      if (this_present_receiveData || that_present_receiveData) {
        if (!(this_present_receiveData && that_present_receiveData))
          return false;
        if (this.receiveData != that.receiveData)
          return false;
      }

      boolean this_present_sentData = true;
      boolean that_present_sentData = true;
      if (this_present_sentData || that_present_sentData) {
        if (!(this_present_sentData && that_present_sentData))
          return false;
        if (this.sentData != that.sentData)
          return false;
      }

      boolean this_present_timeInterval = true;
      boolean that_present_timeInterval = true;
      if (this_present_timeInterval || that_present_timeInterval) {
        if (!(this_present_timeInterval && that_present_timeInterval))
          return false;
        if (this.timeInterval != that.timeInterval)
          return false;
      }

      boolean this_present_process = true && this.isSetProcess();
      boolean that_present_process = true && that.isSetProcess();
      if (this_present_process || that_present_process) {
        if (!(this_present_process && that_present_process))
          return false;
        if (!this.process.equals(that.process))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cpuUsage = true;
      list.add(present_cpuUsage);
      if (present_cpuUsage)
        list.add(cpuUsage);

      boolean present_ramUsage = true;
      list.add(present_ramUsage);
      if (present_ramUsage)
        list.add(ramUsage);

      boolean present_receiveData = true;
      list.add(present_receiveData);
      if (present_receiveData)
        list.add(receiveData);

      boolean present_sentData = true;
      list.add(present_sentData);
      if (present_sentData)
        list.add(sentData);

      boolean present_timeInterval = true;
      list.add(present_timeInterval);
      if (present_timeInterval)
        list.add(timeInterval);

      boolean present_process = true && (isSetProcess());
      list.add(present_process);
      if (present_process)
        list.add(process);

      return list.hashCode();
    }

    @Override
    public int compareTo(deployCommand_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCpuUsage()).compareTo(other.isSetCpuUsage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCpuUsage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpuUsage, other.cpuUsage);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRamUsage()).compareTo(other.isSetRamUsage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRamUsage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ramUsage, other.ramUsage);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReceiveData()).compareTo(other.isSetReceiveData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReceiveData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receiveData, other.receiveData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSentData()).compareTo(other.isSetSentData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSentData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sentData, other.sentData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimeInterval()).compareTo(other.isSetTimeInterval());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeInterval()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeInterval, other.timeInterval);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProcess()).compareTo(other.isSetProcess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProcess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.process, other.process);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deployCommand_args(");
      boolean first = true;

      sb.append("cpuUsage:");
      sb.append(this.cpuUsage);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ramUsage:");
      sb.append(this.ramUsage);
      first = false;
      if (!first) sb.append(", ");
      sb.append("receiveData:");
      sb.append(this.receiveData);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sentData:");
      sb.append(this.sentData);
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeInterval:");
      sb.append(this.timeInterval);
      first = false;
      if (!first) sb.append(", ");
      sb.append("process:");
      if (this.process == null) {
        sb.append("null");
      } else {
        sb.append(this.process);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deployCommand_argsStandardSchemeFactory implements SchemeFactory {
      public deployCommand_argsStandardScheme getScheme() {
        return new deployCommand_argsStandardScheme();
      }
    }

    private static class deployCommand_argsStandardScheme extends StandardScheme<deployCommand_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deployCommand_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CPU_USAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.cpuUsage = iprot.readI16();
                struct.setCpuUsageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RAM_USAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.ramUsage = iprot.readI16();
                struct.setRamUsageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RECEIVE_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.receiveData = iprot.readI16();
                struct.setReceiveDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SENT_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.sentData = iprot.readI16();
                struct.setSentDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // TIME_INTERVAL
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.timeInterval = iprot.readI16();
                struct.setTimeIntervalIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // PROCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.process = iprot.readString();
                struct.setProcessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deployCommand_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CPU_USAGE_FIELD_DESC);
        oprot.writeI16(struct.cpuUsage);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(RAM_USAGE_FIELD_DESC);
        oprot.writeI16(struct.ramUsage);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(RECEIVE_DATA_FIELD_DESC);
        oprot.writeI16(struct.receiveData);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SENT_DATA_FIELD_DESC);
        oprot.writeI16(struct.sentData);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TIME_INTERVAL_FIELD_DESC);
        oprot.writeI16(struct.timeInterval);
        oprot.writeFieldEnd();
        if (struct.process != null) {
          oprot.writeFieldBegin(PROCESS_FIELD_DESC);
          oprot.writeString(struct.process);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deployCommand_argsTupleSchemeFactory implements SchemeFactory {
      public deployCommand_argsTupleScheme getScheme() {
        return new deployCommand_argsTupleScheme();
      }
    }

    private static class deployCommand_argsTupleScheme extends TupleScheme<deployCommand_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deployCommand_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCpuUsage()) {
          optionals.set(0);
        }
        if (struct.isSetRamUsage()) {
          optionals.set(1);
        }
        if (struct.isSetReceiveData()) {
          optionals.set(2);
        }
        if (struct.isSetSentData()) {
          optionals.set(3);
        }
        if (struct.isSetTimeInterval()) {
          optionals.set(4);
        }
        if (struct.isSetProcess()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetCpuUsage()) {
          oprot.writeI16(struct.cpuUsage);
        }
        if (struct.isSetRamUsage()) {
          oprot.writeI16(struct.ramUsage);
        }
        if (struct.isSetReceiveData()) {
          oprot.writeI16(struct.receiveData);
        }
        if (struct.isSetSentData()) {
          oprot.writeI16(struct.sentData);
        }
        if (struct.isSetTimeInterval()) {
          oprot.writeI16(struct.timeInterval);
        }
        if (struct.isSetProcess()) {
          oprot.writeString(struct.process);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deployCommand_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.cpuUsage = iprot.readI16();
          struct.setCpuUsageIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ramUsage = iprot.readI16();
          struct.setRamUsageIsSet(true);
        }
        if (incoming.get(2)) {
          struct.receiveData = iprot.readI16();
          struct.setReceiveDataIsSet(true);
        }
        if (incoming.get(3)) {
          struct.sentData = iprot.readI16();
          struct.setSentDataIsSet(true);
        }
        if (incoming.get(4)) {
          struct.timeInterval = iprot.readI16();
          struct.setTimeIntervalIsSet(true);
        }
        if (incoming.get(5)) {
          struct.process = iprot.readString();
          struct.setProcessIsSet(true);
        }
      }
    }

  }

  public static class deployCommand_result implements org.apache.thrift.TBase<deployCommand_result, deployCommand_result._Fields>, java.io.Serializable, Cloneable, Comparable<deployCommand_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deployCommand_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deployCommand_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deployCommand_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deployCommand_result.class, metaDataMap);
    }

    public deployCommand_result() {
    }

    public deployCommand_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deployCommand_result(deployCommand_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public deployCommand_result deepCopy() {
      return new deployCommand_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public deployCommand_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deployCommand_result)
        return this.equals((deployCommand_result)that);
      return false;
    }

    public boolean equals(deployCommand_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deployCommand_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deployCommand_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deployCommand_resultStandardSchemeFactory implements SchemeFactory {
      public deployCommand_resultStandardScheme getScheme() {
        return new deployCommand_resultStandardScheme();
      }
    }

    private static class deployCommand_resultStandardScheme extends StandardScheme<deployCommand_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deployCommand_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deployCommand_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deployCommand_resultTupleSchemeFactory implements SchemeFactory {
      public deployCommand_resultTupleScheme getScheme() {
        return new deployCommand_resultTupleScheme();
      }
    }

    private static class deployCommand_resultTupleScheme extends TupleScheme<deployCommand_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deployCommand_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deployCommand_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
