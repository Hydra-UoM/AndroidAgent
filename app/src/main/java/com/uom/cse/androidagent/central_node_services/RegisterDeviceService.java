package com.uom.cse.androidagent.central_node_services; /**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
public class RegisterDeviceService {

  public interface Iface {

    public void registerDevice(Device device) throws TException;

    public void pushProcessesInfo(List<ThriftAgentProcessInfo> processes) throws TException;

  }

  public interface AsyncIface {

    public void registerDevice(Device device, AsyncMethodCallback resultHandler) throws TException;

    public void pushProcessesInfo(List<ThriftAgentProcessInfo> processes, AsyncMethodCallback resultHandler) throws TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void registerDevice(Device device) throws TException
    {
      send_registerDevice(device);
      recv_registerDevice();
    }

    public void send_registerDevice(Device device) throws TException
    {
      registerDevice_args args = new registerDevice_args();
      args.setDevice(device);
      sendBase("registerDevice", args);
    }

    public void recv_registerDevice() throws TException
    {
      registerDevice_result result = new registerDevice_result();
      receiveBase(result, "registerDevice");
      return;
    }

    public void pushProcessesInfo(List<ThriftAgentProcessInfo> processes) throws TException
    {
      send_pushProcessesInfo(processes);
      recv_pushProcessesInfo();
    }

    public void send_pushProcessesInfo(List<ThriftAgentProcessInfo> processes) throws TException
    {
      pushProcessesInfo_args args = new pushProcessesInfo_args();
      args.setProcesses(processes);
      sendBase("pushProcessesInfo", args);
    }

    public void recv_pushProcessesInfo() throws TException
    {
      pushProcessesInfo_result result = new pushProcessesInfo_result();
      receiveBase(result, "pushProcessesInfo");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void registerDevice(Device device, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      registerDevice_call method_call = new registerDevice_call(device, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class registerDevice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Device device;
      public registerDevice_call(Device device, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.device = device;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("registerDevice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        registerDevice_args args = new registerDevice_args();
        args.setDevice(device);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_registerDevice();
      }
    }

    public void pushProcessesInfo(List<ThriftAgentProcessInfo> processes, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      pushProcessesInfo_call method_call = new pushProcessesInfo_call(processes, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class pushProcessesInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<ThriftAgentProcessInfo> processes;
      public pushProcessesInfo_call(List<ThriftAgentProcessInfo> processes, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.processes = processes;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("pushProcessesInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        pushProcessesInfo_args args = new pushProcessesInfo_args();
        args.setProcesses(processes);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_pushProcessesInfo();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("registerDevice", new registerDevice());
      processMap.put("pushProcessesInfo", new pushProcessesInfo());
      return processMap;
    }

    public static class registerDevice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, registerDevice_args> {
      public registerDevice() {
        super("registerDevice");
      }

      public registerDevice_args getEmptyArgsInstance() {
        return new registerDevice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public registerDevice_result getResult(I iface, registerDevice_args args) throws TException {
        registerDevice_result result = new registerDevice_result();
        iface.registerDevice(args.device);
        return result;
      }
    }

    public static class pushProcessesInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, pushProcessesInfo_args> {
      public pushProcessesInfo() {
        super("pushProcessesInfo");
      }

      public pushProcessesInfo_args getEmptyArgsInstance() {
        return new pushProcessesInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public pushProcessesInfo_result getResult(I iface, pushProcessesInfo_args args) throws TException {
        pushProcessesInfo_result result = new pushProcessesInfo_result();
        iface.pushProcessesInfo(args.processes);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("registerDevice", new registerDevice());
      processMap.put("pushProcessesInfo", new pushProcessesInfo());
      return processMap;
    }

    public static class registerDevice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, registerDevice_args, Void> {
      public registerDevice() {
        super("registerDevice");
      }

      public registerDevice_args getEmptyArgsInstance() {
        return new registerDevice_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            registerDevice_result result = new registerDevice_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            registerDevice_result result = new registerDevice_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, registerDevice_args args, AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.registerDevice(args.device,resultHandler);
      }
    }

    public static class pushProcessesInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, pushProcessesInfo_args, Void> {
      public pushProcessesInfo() {
        super("pushProcessesInfo");
      }

      public pushProcessesInfo_args getEmptyArgsInstance() {
        return new pushProcessesInfo_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            pushProcessesInfo_result result = new pushProcessesInfo_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            pushProcessesInfo_result result = new pushProcessesInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, pushProcessesInfo_args args, AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.pushProcessesInfo(args.processes,resultHandler);
      }
    }

  }

  public static class registerDevice_args implements org.apache.thrift.TBase<registerDevice_args, registerDevice_args._Fields>, java.io.Serializable, Cloneable, Comparable<registerDevice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerDevice_args");

    private static final org.apache.thrift.protocol.TField DEVICE_FIELD_DESC = new org.apache.thrift.protocol.TField("device", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerDevice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerDevice_argsTupleSchemeFactory());
    }

    public Device device; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE((short)1, "device");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE
            return DEVICE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE, new org.apache.thrift.meta_data.FieldMetaData("device", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Device.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerDevice_args.class, metaDataMap);
    }

    public registerDevice_args() {
    }

    public registerDevice_args(
      Device device)
    {
      this();
      this.device = device;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerDevice_args(registerDevice_args other) {
      if (other.isSetDevice()) {
        this.device = new Device(other.device);
      }
    }

    public registerDevice_args deepCopy() {
      return new registerDevice_args(this);
    }

    @Override
    public void clear() {
      this.device = null;
    }

    public Device getDevice() {
      return this.device;
    }

    public registerDevice_args setDevice(Device device) {
      this.device = device;
      return this;
    }

    public void unsetDevice() {
      this.device = null;
    }

    /** Returns true if field device is set (has been assigned a value) and false otherwise */
    public boolean isSetDevice() {
      return this.device != null;
    }

    public void setDeviceIsSet(boolean value) {
      if (!value) {
        this.device = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE:
        if (value == null) {
          unsetDevice();
        } else {
          setDevice((Device)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE:
        return getDevice();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE:
        return isSetDevice();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerDevice_args)
        return this.equals((registerDevice_args)that);
      return false;
    }

    public boolean equals(registerDevice_args that) {
      if (that == null)
        return false;

      boolean this_present_device = true && this.isSetDevice();
      boolean that_present_device = true && that.isSetDevice();
      if (this_present_device || that_present_device) {
        if (!(this_present_device && that_present_device))
          return false;
        if (!this.device.equals(that.device))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_device = true && (isSetDevice());
      list.add(present_device);
      if (present_device)
        list.add(device);

      return list.hashCode();
    }

    @Override
    public int compareTo(registerDevice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDevice()).compareTo(other.isSetDevice());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDevice()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.device, other.device);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerDevice_args(");
      boolean first = true;

      sb.append("device:");
      if (this.device == null) {
        sb.append("null");
      } else {
        sb.append(this.device);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (device != null) {
        device.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerDevice_argsStandardSchemeFactory implements SchemeFactory {
      public registerDevice_argsStandardScheme getScheme() {
        return new registerDevice_argsStandardScheme();
      }
    }

    private static class registerDevice_argsStandardScheme extends StandardScheme<registerDevice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerDevice_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.device = new Device();
                struct.device.read(iprot);
                struct.setDeviceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerDevice_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.device != null) {
          oprot.writeFieldBegin(DEVICE_FIELD_DESC);
          struct.device.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerDevice_argsTupleSchemeFactory implements SchemeFactory {
      public registerDevice_argsTupleScheme getScheme() {
        return new registerDevice_argsTupleScheme();
      }
    }

    private static class registerDevice_argsTupleScheme extends TupleScheme<registerDevice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerDevice_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDevice()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDevice()) {
          struct.device.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerDevice_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.device = new Device();
          struct.device.read(iprot);
          struct.setDeviceIsSet(true);
        }
      }
    }

  }

  public static class registerDevice_result implements org.apache.thrift.TBase<registerDevice_result, registerDevice_result._Fields>, java.io.Serializable, Cloneable, Comparable<registerDevice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerDevice_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerDevice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerDevice_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerDevice_result.class, metaDataMap);
    }

    public registerDevice_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerDevice_result(registerDevice_result other) {
    }

    public registerDevice_result deepCopy() {
      return new registerDevice_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerDevice_result)
        return this.equals((registerDevice_result)that);
      return false;
    }

    public boolean equals(registerDevice_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(registerDevice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerDevice_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerDevice_resultStandardSchemeFactory implements SchemeFactory {
      public registerDevice_resultStandardScheme getScheme() {
        return new registerDevice_resultStandardScheme();
      }
    }

    private static class registerDevice_resultStandardScheme extends StandardScheme<registerDevice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerDevice_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerDevice_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerDevice_resultTupleSchemeFactory implements SchemeFactory {
      public registerDevice_resultTupleScheme getScheme() {
        return new registerDevice_resultTupleScheme();
      }
    }

    private static class registerDevice_resultTupleScheme extends TupleScheme<registerDevice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerDevice_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerDevice_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class pushProcessesInfo_args implements org.apache.thrift.TBase<pushProcessesInfo_args, pushProcessesInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<pushProcessesInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pushProcessesInfo_args");

    private static final org.apache.thrift.protocol.TField PROCESSES_FIELD_DESC = new org.apache.thrift.protocol.TField("processes", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pushProcessesInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pushProcessesInfo_argsTupleSchemeFactory());
    }

    public List<ThriftAgentProcessInfo> processes; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROCESSES((short)1, "processes");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROCESSES
            return PROCESSES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROCESSES, new org.apache.thrift.meta_data.FieldMetaData("processes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftAgentProcessInfo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pushProcessesInfo_args.class, metaDataMap);
    }

    public pushProcessesInfo_args() {
    }

    public pushProcessesInfo_args(
      List<ThriftAgentProcessInfo> processes)
    {
      this();
      this.processes = processes;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pushProcessesInfo_args(pushProcessesInfo_args other) {
      if (other.isSetProcesses()) {
        List<ThriftAgentProcessInfo> __this__processes = new ArrayList<ThriftAgentProcessInfo>(other.processes.size());
        for (ThriftAgentProcessInfo other_element : other.processes) {
          __this__processes.add(new ThriftAgentProcessInfo(other_element));
        }
        this.processes = __this__processes;
      }
    }

    public pushProcessesInfo_args deepCopy() {
      return new pushProcessesInfo_args(this);
    }

    @Override
    public void clear() {
      this.processes = null;
    }

    public int getProcessesSize() {
      return (this.processes == null) ? 0 : this.processes.size();
    }

    public java.util.Iterator<ThriftAgentProcessInfo> getProcessesIterator() {
      return (this.processes == null) ? null : this.processes.iterator();
    }

    public void addToProcesses(ThriftAgentProcessInfo elem) {
      if (this.processes == null) {
        this.processes = new ArrayList<ThriftAgentProcessInfo>();
      }
      this.processes.add(elem);
    }

    public List<ThriftAgentProcessInfo> getProcesses() {
      return this.processes;
    }

    public pushProcessesInfo_args setProcesses(List<ThriftAgentProcessInfo> processes) {
      this.processes = processes;
      return this;
    }

    public void unsetProcesses() {
      this.processes = null;
    }

    /** Returns true if field processes is set (has been assigned a value) and false otherwise */
    public boolean isSetProcesses() {
      return this.processes != null;
    }

    public void setProcessesIsSet(boolean value) {
      if (!value) {
        this.processes = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROCESSES:
        if (value == null) {
          unsetProcesses();
        } else {
          setProcesses((List<ThriftAgentProcessInfo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROCESSES:
        return getProcesses();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROCESSES:
        return isSetProcesses();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pushProcessesInfo_args)
        return this.equals((pushProcessesInfo_args)that);
      return false;
    }

    public boolean equals(pushProcessesInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_processes = true && this.isSetProcesses();
      boolean that_present_processes = true && that.isSetProcesses();
      if (this_present_processes || that_present_processes) {
        if (!(this_present_processes && that_present_processes))
          return false;
        if (!this.processes.equals(that.processes))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_processes = true && (isSetProcesses());
      list.add(present_processes);
      if (present_processes)
        list.add(processes);

      return list.hashCode();
    }

    @Override
    public int compareTo(pushProcessesInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProcesses()).compareTo(other.isSetProcesses());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProcesses()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.processes, other.processes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pushProcessesInfo_args(");
      boolean first = true;

      sb.append("processes:");
      if (this.processes == null) {
        sb.append("null");
      } else {
        sb.append(this.processes);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pushProcessesInfo_argsStandardSchemeFactory implements SchemeFactory {
      public pushProcessesInfo_argsStandardScheme getScheme() {
        return new pushProcessesInfo_argsStandardScheme();
      }
    }

    private static class pushProcessesInfo_argsStandardScheme extends StandardScheme<pushProcessesInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pushProcessesInfo_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROCESSES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.processes = new ArrayList<ThriftAgentProcessInfo>(_list0.size);
                  ThriftAgentProcessInfo _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new ThriftAgentProcessInfo();
                    _elem1.read(iprot);
                    struct.processes.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setProcessesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pushProcessesInfo_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.processes != null) {
          oprot.writeFieldBegin(PROCESSES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.processes.size()));
            for (ThriftAgentProcessInfo _iter3 : struct.processes)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pushProcessesInfo_argsTupleSchemeFactory implements SchemeFactory {
      public pushProcessesInfo_argsTupleScheme getScheme() {
        return new pushProcessesInfo_argsTupleScheme();
      }
    }

    private static class pushProcessesInfo_argsTupleScheme extends TupleScheme<pushProcessesInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pushProcessesInfo_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProcesses()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProcesses()) {
          {
            oprot.writeI32(struct.processes.size());
            for (ThriftAgentProcessInfo _iter4 : struct.processes)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pushProcessesInfo_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.processes = new ArrayList<ThriftAgentProcessInfo>(_list5.size);
            ThriftAgentProcessInfo _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new ThriftAgentProcessInfo();
              _elem6.read(iprot);
              struct.processes.add(_elem6);
            }
          }
          struct.setProcessesIsSet(true);
        }
      }
    }

  }

  public static class pushProcessesInfo_result implements org.apache.thrift.TBase<pushProcessesInfo_result, pushProcessesInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<pushProcessesInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pushProcessesInfo_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pushProcessesInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pushProcessesInfo_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pushProcessesInfo_result.class, metaDataMap);
    }

    public pushProcessesInfo_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pushProcessesInfo_result(pushProcessesInfo_result other) {
    }

    public pushProcessesInfo_result deepCopy() {
      return new pushProcessesInfo_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pushProcessesInfo_result)
        return this.equals((pushProcessesInfo_result)that);
      return false;
    }

    public boolean equals(pushProcessesInfo_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(pushProcessesInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pushProcessesInfo_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pushProcessesInfo_resultStandardSchemeFactory implements SchemeFactory {
      public pushProcessesInfo_resultStandardScheme getScheme() {
        return new pushProcessesInfo_resultStandardScheme();
      }
    }

    private static class pushProcessesInfo_resultStandardScheme extends StandardScheme<pushProcessesInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pushProcessesInfo_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pushProcessesInfo_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pushProcessesInfo_resultTupleSchemeFactory implements SchemeFactory {
      public pushProcessesInfo_resultTupleScheme getScheme() {
        return new pushProcessesInfo_resultTupleScheme();
      }
    }

    private static class pushProcessesInfo_resultTupleScheme extends TupleScheme<pushProcessesInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pushProcessesInfo_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pushProcessesInfo_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
