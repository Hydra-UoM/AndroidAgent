/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.uom.cse.androidagent.thriftGeneratedCode;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
public class SensorDetails implements org.apache.thrift.TBase<SensorDetails, SensorDetails._Fields>, java.io.Serializable, Cloneable, Comparable<SensorDetails> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SensorDetails");

  private static final org.apache.thrift.protocol.TField SENSOR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sensorName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField AVAILABILITY_FIELD_DESC = new org.apache.thrift.protocol.TField("availability", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SensorDetailsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SensorDetailsTupleSchemeFactory());
  }

  public String sensorName; // required
  public String availability; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SENSOR_NAME((short)1, "sensorName"),
    AVAILABILITY((short)2, "availability");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SENSOR_NAME
          return SENSOR_NAME;
        case 2: // AVAILABILITY
          return AVAILABILITY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SENSOR_NAME, new org.apache.thrift.meta_data.FieldMetaData("sensorName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AVAILABILITY, new org.apache.thrift.meta_data.FieldMetaData("availability", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SensorDetails.class, metaDataMap);
  }

  public SensorDetails() {
  }

  public SensorDetails(
    String sensorName,
    String availability)
  {
    this();
    this.sensorName = sensorName;
    this.availability = availability;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SensorDetails(SensorDetails other) {
    if (other.isSetSensorName()) {
      this.sensorName = other.sensorName;
    }
    if (other.isSetAvailability()) {
      this.availability = other.availability;
    }
  }

  public SensorDetails deepCopy() {
    return new SensorDetails(this);
  }

  @Override
  public void clear() {
    this.sensorName = null;
    this.availability = null;
  }

  public String getSensorName() {
    return this.sensorName;
  }

  public SensorDetails setSensorName(String sensorName) {
    this.sensorName = sensorName;
    return this;
  }

  public void unsetSensorName() {
    this.sensorName = null;
  }

  /** Returns true if field sensorName is set (has been assigned a value) and false otherwise */
  public boolean isSetSensorName() {
    return this.sensorName != null;
  }

  public void setSensorNameIsSet(boolean value) {
    if (!value) {
      this.sensorName = null;
    }
  }

  public String getAvailability() {
    return this.availability;
  }

  public SensorDetails setAvailability(String availability) {
    this.availability = availability;
    return this;
  }

  public void unsetAvailability() {
    this.availability = null;
  }

  /** Returns true if field availability is set (has been assigned a value) and false otherwise */
  public boolean isSetAvailability() {
    return this.availability != null;
  }

  public void setAvailabilityIsSet(boolean value) {
    if (!value) {
      this.availability = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SENSOR_NAME:
      if (value == null) {
        unsetSensorName();
      } else {
        setSensorName((String)value);
      }
      break;

    case AVAILABILITY:
      if (value == null) {
        unsetAvailability();
      } else {
        setAvailability((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SENSOR_NAME:
      return getSensorName();

    case AVAILABILITY:
      return getAvailability();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SENSOR_NAME:
      return isSetSensorName();
    case AVAILABILITY:
      return isSetAvailability();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SensorDetails)
      return this.equals((SensorDetails)that);
    return false;
  }

  public boolean equals(SensorDetails that) {
    if (that == null)
      return false;

    boolean this_present_sensorName = true && this.isSetSensorName();
    boolean that_present_sensorName = true && that.isSetSensorName();
    if (this_present_sensorName || that_present_sensorName) {
      if (!(this_present_sensorName && that_present_sensorName))
        return false;
      if (!this.sensorName.equals(that.sensorName))
        return false;
    }

    boolean this_present_availability = true && this.isSetAvailability();
    boolean that_present_availability = true && that.isSetAvailability();
    if (this_present_availability || that_present_availability) {
      if (!(this_present_availability && that_present_availability))
        return false;
      if (!this.availability.equals(that.availability))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_sensorName = true && (isSetSensorName());
    list.add(present_sensorName);
    if (present_sensorName)
      list.add(sensorName);

    boolean present_availability = true && (isSetAvailability());
    list.add(present_availability);
    if (present_availability)
      list.add(availability);

    return list.hashCode();
  }

  @Override
  public int compareTo(SensorDetails other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSensorName()).compareTo(other.isSetSensorName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSensorName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sensorName, other.sensorName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvailability()).compareTo(other.isSetAvailability());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvailability()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.availability, other.availability);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SensorDetails(");
    boolean first = true;

    sb.append("sensorName:");
    if (this.sensorName == null) {
      sb.append("null");
    } else {
      sb.append(this.sensorName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("availability:");
    if (this.availability == null) {
      sb.append("null");
    } else {
      sb.append(this.availability);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SensorDetailsStandardSchemeFactory implements SchemeFactory {
    public SensorDetailsStandardScheme getScheme() {
      return new SensorDetailsStandardScheme();
    }
  }

  private static class SensorDetailsStandardScheme extends StandardScheme<SensorDetails> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SensorDetails struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SENSOR_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sensorName = iprot.readString();
              struct.setSensorNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // AVAILABILITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.availability = iprot.readString();
              struct.setAvailabilityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SensorDetails struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sensorName != null) {
        oprot.writeFieldBegin(SENSOR_NAME_FIELD_DESC);
        oprot.writeString(struct.sensorName);
        oprot.writeFieldEnd();
      }
      if (struct.availability != null) {
        oprot.writeFieldBegin(AVAILABILITY_FIELD_DESC);
        oprot.writeString(struct.availability);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SensorDetailsTupleSchemeFactory implements SchemeFactory {
    public SensorDetailsTupleScheme getScheme() {
      return new SensorDetailsTupleScheme();
    }
  }

  private static class SensorDetailsTupleScheme extends TupleScheme<SensorDetails> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SensorDetails struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSensorName()) {
        optionals.set(0);
      }
      if (struct.isSetAvailability()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetSensorName()) {
        oprot.writeString(struct.sensorName);
      }
      if (struct.isSetAvailability()) {
        oprot.writeString(struct.availability);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SensorDetails struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.sensorName = iprot.readString();
        struct.setSensorNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.availability = iprot.readString();
        struct.setAvailabilityIsSet(true);
      }
    }
  }

}

